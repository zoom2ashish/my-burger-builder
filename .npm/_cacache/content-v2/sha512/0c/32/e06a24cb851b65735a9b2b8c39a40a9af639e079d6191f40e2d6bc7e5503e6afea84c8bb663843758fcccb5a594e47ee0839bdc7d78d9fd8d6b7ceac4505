{
  "_id" : "pretty-format",
  "_rev" : "179-2d1f2352e8a6bfcc3e0643799f3929f9",
  "name" : "pretty-format",
  "description" : "Stringify any JavaScript value.",
  "dist-tags" : {
    "next" : "25.0.0",
    "test" : "21.3.0-beta.15",
    "beta" : "24.2.0-alpha.0",
    "latest" : "25.1.0"
  },
  "versions" : {
    "24.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0.tgz",
        "shasum" : "cb6599fd73ac088e37ed682f61291e4678f48591"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "lerna/3.10.5/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0",
      "gitHead" : "634e5a54f46b2a62d1dc81a170562e6f4e55ad60",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0_1548428698756_0.3964871886317509"
      },
      "_nodeVersion" : "8.11.3"
    },
    "24.8.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.8.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.8.0.tgz",
        "shasum" : "8dae7044f58db7cb8be245383b565a963e3c27f2"
      },
      "dependencies" : {
        "@jest/types" : "^24.8.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0",
        "react-is" : "^16.8.4"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-is" : "^16.7.1",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      }, {
        "email" : "scott.hovestadt@gmail.com",
        "name" : "scotthovestadt"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v11.12.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "scotthovestadt",
        "email" : "scott.hovestadt@gmail.com"
      },
      "_id" : "pretty-format@24.8.0",
      "gitHead" : "845728f24b3ef41e450595c384e9b5c9fdf248a4",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.8.0_1557021741471_0.5377404816199578"
      },
      "_nodeVersion" : "11.12.0"
    },
    "4.1.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "4.1.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-4.1.0.tgz",
        "shasum" : "fcd582438146d039a93a670fc18c72aa71325577"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^15.1.1",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.8",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@4.1.0",
      "gitHead" : "d03f38d418dbe342a0f9f8e8e787b50f3c2317dc",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-4.1.0.tgz_1474370567756_0.6978352644946426"
      },
      "_shasum" : "fcd582438146d039a93a670fc18c72aa71325577",
      "jest" : {
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.6.0"
    },
    "24.4.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.4.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.4.0.tgz",
        "shasum" : "48db91969eb89f272c1bf3514bc5d5b228b3e722"
      },
      "dependencies" : {
        "@jest/types" : "^24.3.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0",
        "react-is" : "^16.8.4"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-is" : "^16.7.1",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.4.0",
      "gitHead" : "a018000fc162db3cfd0ebf9f23fdb734f05821a6",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.4.0_1552316269282_0.7008450752930335"
      },
      "_nodeVersion" : "8.11.3"
    },
    "20.1.0-delta.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-delta.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-delta.1.tgz",
        "shasum" : "f1d31d80b5bd8724b33f3065acb1457710213d0d"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.1.0-delta.1",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-delta.1.tgz_1500367613994_0.9472515909001231"
      },
      "_nodeVersion" : "8.1.4"
    },
    "21.3.0-beta.5" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.5",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.5.tgz",
        "shasum" : "7293f1b7cd5af9e4d451d3fce2d9edf37be1225a"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.5",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.5.tgz_1509628650932_0.5733425945509225"
      },
      "_nodeVersion" : "8.4.0"
    },
    "21.3.0-beta.6" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.6",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.6.tgz",
        "shasum" : "9e7124609ce93e236214032f812d01fd87dffdac"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.6",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.6.tgz_1509726094359_0.6912878968287259"
      },
      "_nodeVersion" : "8.4.0"
    },
    "20.1.0-delta.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-delta.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-delta.3.tgz",
        "shasum" : "1f84f5ba81dc2d9670aa629e87369650da3bdf62"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.1.0-delta.3",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-delta.3.tgz_1501020745661_0.15517720603384078"
      },
      "_nodeVersion" : "8.2.1"
    },
    "21.3.0-beta.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.3.tgz",
        "shasum" : "f52e763ef855a5e0b093fc4af201592e896512f9"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.3",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.3.tgz_1508960044838_0.6422023139894009"
      },
      "_nodeVersion" : "8.4.0"
    },
    "20.1.0-delta.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-delta.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-delta.2.tgz",
        "shasum" : "b30fb1f421158115db5c2561aee3e0932058b4cf"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.1.0-delta.2",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-delta.2.tgz_1500469003591_0.6975763365626335"
      },
      "_nodeVersion" : "8.1.4"
    },
    "21.3.0-beta.4" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.4",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.4.tgz",
        "shasum" : "6b3b8aba0b7097f821156e5fd1e3bc0fa923b17f"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.4",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.4.tgz_1509024417918_0.15134358499199152"
      },
      "_nodeVersion" : "8.4.0"
    },
    "20.1.0-delta.5" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-delta.5",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-delta.5.tgz",
        "shasum" : "7a45a00938192cb306606b04c84a885a1501e0ff"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "aaronabramov",
        "email" : "aaron@abramov.io"
      },
      "_id" : "pretty-format@20.1.0-delta.5",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-delta.5.tgz_1501605216720_0.6961817897390574"
      },
      "_nodeVersion" : "8.0.0"
    },
    "21.3.0-beta.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.1.tgz",
        "shasum" : "0525f192e6722eae942a9ecb93eab7ef4faa2440"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.1",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.1.tgz_1507114118268_0.1342497942969203"
      },
      "_nodeVersion" : "8.4.0"
    },
    "20.1.0-delta.4" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-delta.4",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-delta.4.tgz",
        "shasum" : "4867b8e91e1eb7a97b2b02bd46bf9829f6fe1c89"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.1.0-delta.4",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-delta.4.tgz_1501175948595_0.7395031834021211"
      },
      "_nodeVersion" : "8.2.1"
    },
    "21.3.0-beta.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.2.tgz",
        "shasum" : "781840c8d10bc37c4438c61ab50678917a9f8a7d"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.2",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.2.tgz_1507888445329_0.3785671025980264"
      },
      "_nodeVersion" : "8.4.0"
    },
    "3.3.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.3.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.3.2.tgz",
        "shasum" : "1643a3030cb27e6c73280d9dc9602dc203daf9bf"
      },
      "dependencies" : {
        "lodash" : "^4.13.1"
      },
      "devDependencies" : {
        "jest" : "^12.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.6",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@3.3.2",
      "gitHead" : "457b319dcf7ab6b2455820ffd6896b70d0d5e475",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.3.2.tgz_1466630764906_0.5482108551077545"
      },
      "_shasum" : "1643a3030cb27e6c73280d9dc9602dc203daf9bf",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.0.0"
    },
    "24.0.0-alpha.9" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.9",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.9.tgz",
        "shasum" : "d01a940d5c9a8bd38315f2dd3dc971df8547b172"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.9",
      "gitHead" : "c7caa7ba5904d0c61e586694cde5f536639e4afc",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.9_1545229558375_0.622054766681222"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "3.7.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.7.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.7.0.tgz",
        "shasum" : "0bf7f828cafe6e86ffd6c9dd5a707867f35651ab"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^14.1.0",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@3.7.0",
      "gitHead" : "bc9409fb6d727d42082f2ff87870d7f49723130c",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.7.0.tgz_1472742965635_0.8393159916158766"
      },
      "_shasum" : "0bf7f828cafe6e86ffd6c9dd5a707867f35651ab",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.5.0"
    },
    "24.0.0-alpha.7" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.7",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.7.tgz",
        "shasum" : "c3f932635a38569921eac940b2217bb774ef4d18"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.7",
      "gitHead" : "4954f46708415174c48a58f296a605fbe1244a31",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.7_1544544476167_0.4371508942416136"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.10.0"
    },
    "24.0.0-alpha.8" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.8",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.8.tgz",
        "shasum" : "522f73193f1e837850030068ecaecbe0b7f7d06c"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.8",
      "gitHead" : "700e0dadb85f5dc8ff5dac6c7e98956690049734",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.8_1544730472585_0.11588537364178064"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.10.0"
    },
    "3.3.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.3.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.3.0.tgz",
        "shasum" : "1dd02939d41bc88fa01b0b7e76bb39562f37ba01"
      },
      "dependencies" : {
        "lodash" : "^4.13.1"
      },
      "devDependencies" : {
        "mocha" : "^2.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "mocha test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.6",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@3.3.0",
      "gitHead" : "e39d00679d4e5e43f23d8a7ef29f2d5c844ec46a",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.3.0.tgz_1465972283646_0.32496382878161967"
      },
      "_shasum" : "1dd02939d41bc88fa01b0b7e76bb39562f37ba01",
      "_nodeVersion" : "6.0.0"
    },
    "3.3.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.3.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.3.1.tgz",
        "shasum" : "54c1d4a7e705382017837d51916d8ec6662e4726"
      },
      "dependencies" : {
        "lodash" : "^4.13.1"
      },
      "devDependencies" : {
        "jest" : "^12.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.3",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@3.3.1",
      "gitHead" : "ede3ded058074a8176512d31891b8999bc9b7ea5",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.3.1.tgz_1466530860016_0.6480775438249111"
      },
      "_shasum" : "54c1d4a7e705382017837d51916d8ec6662e4726",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "5.10.1"
    },
    "24.0.0-alpha.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.1.tgz",
        "shasum" : "38dc7af33801d644755235be1940fc1b1799e112"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.1",
      "gitHead" : "4954f46708415174c48a58f296a605fbe1244a31",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.1_1540222549216_0.9692385031286568"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.10.0"
    },
    "2.1.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "2.1.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-2.1.0.tgz",
        "shasum" : "476ffab78d55d8c43474b999bfa817e345d117c3"
      },
      "dependencies" : {
        "lodash" : "^4.13.1"
      },
      "devDependencies" : {
        "mocha" : "^2.1.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "mocha test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.3",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@2.1.0",
      "gitHead" : "06b0943f6b43c685c8a3153e372f20d894ca0e69",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-2.1.0.tgz_1464825138448_0.10198654420673847"
      },
      "_shasum" : "476ffab78d55d8c43474b999bfa817e345d117c3",
      "_nodeVersion" : "5.10.1"
    },
    "24.0.0-alpha.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.2.tgz",
        "shasum" : "cbcd7609a4e594c478f46aa1b6d652d285342671"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.2",
      "gitHead" : "c5e36835cff4b241327db9cf58c8f6f7227ed1f7",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.2_1540464679697_0.9806271720599484"
      },
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.0.tgz",
        "shasum" : "b7dde608501b681b8eaccf56522f93b97abad6cd"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.0",
      "gitHead" : "22f67d49ffcce7a5b6d6891438b837b3b26ba9db",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.0_1539951166013_0.3702080103625105"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.10.0"
    },
    "24.0.0-alpha.5" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.5",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.5.tgz",
        "shasum" : "7d55172dd88d5cc874353f2b60403f3a41e248fa"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.5",
      "gitHead" : "2c18a53e8ff2437bba5fcb8076b754ac5f79f9f8",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.5_1541769165697_0.919979009351394"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.6" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.6",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.6.tgz",
        "shasum" : "25ad2fa46b342d6278bf241c5d2114d4376fbac1"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.6",
      "gitHead" : "49d08403a941e596eda1279c07a1eaf4d4a73dad",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.6_1541785782719_0.07882660895723093"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "21.0.0-alpha.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.0.0-alpha.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.0.0-alpha.1.tgz",
        "shasum" : "ce06c788260803f557e569d0e2a526510375df34"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.0.0-alpha.1",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.0.0-alpha.1.tgz_1502446445030_0.3482506617438048"
      },
      "_nodeVersion" : "8.2.1"
    },
    "24.0.0-alpha.4" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.4",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.4.tgz",
        "shasum" : "cc1f7497e2496b71f8ad99f1526096e515fada03"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.4",
      "gitHead" : "e41f0bb257c6652c3100b97a1087f9f812fbea0d",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.4_1540571595114_0.5456319880913951"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "23.0.0-alpha.7" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-alpha.7",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-alpha.7.tgz",
        "shasum" : "d4a28747c40adf084100315e12c1eb49f122081d"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-alpha.7",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-alpha.7_1523991319820_0.6475940960465933"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "21.0.0-alpha.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.0.0-alpha.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.0.0-alpha.2.tgz",
        "shasum" : "0122a9d5f73b9895ee9ba5954aeb817fb988f9c3"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "aaronabramov",
        "email" : "aaron@abramov.io"
      },
      "_id" : "pretty-format@21.0.0-alpha.2",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.0.0-alpha.2.tgz_1503353208575_0.771268846001476"
      },
      "_nodeVersion" : "8.0.0"
    },
    "23.0.0-alpha.5" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-alpha.5",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-alpha.5.tgz",
        "shasum" : "49441032994ce2b1cfa74531c1c9d9a36fe59e90"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-alpha.5",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-alpha.5_1523387900663_0.46189603391715317"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "23.0.0-alpha.4" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-alpha.4",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-alpha.4.tgz",
        "shasum" : "50990fdbbdfe353da0c1046d965f3c5c9b98866e"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-alpha.4",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-alpha.4_1522067501793_0.4253621525737654"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "21.3.0-beta.9" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.9",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.9.tgz",
        "shasum" : "dedd97b728c818f8e9c8818fc4c35c156cae01a5"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.9",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.9.tgz_1511356652309_0.2100884655956179"
      },
      "_nodeVersion" : "8.4.0"
    },
    "22.1.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "22.1.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-22.1.0.tgz",
        "shasum" : "2277605b40ed4529ae4db51ff62f4be817647914"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@22.1.0",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-22.1.0.tgz_1516017435817_0.08602811326272786"
      },
      "_nodeVersion" : "9.4.0"
    },
    "23.0.0-alpha.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-alpha.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-alpha.2.tgz",
        "shasum" : "c16ab6df05ae34b94536f9aa193ba642db2f9b3c"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-alpha.2",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-alpha.2_1522060847231_0.13993785091764677"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "21.3.0-beta.7" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.7",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.7.tgz",
        "shasum" : "5cd0599fc79e89ac4d5f639d9d7aeb83cfa85d11"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.7",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.7.tgz_1509961188645_0.923250918276608"
      },
      "_nodeVersion" : "8.4.0"
    },
    "21.3.0-beta.8" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.8",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.8.tgz",
        "shasum" : "66cb61c4658c2ecab21251495d6d6c102a25b4ba"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.8",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.8.tgz_1510076622582_0.9108345645945519"
      },
      "_nodeVersion" : "8.4.0"
    },
    "23.0.0-alpha.5r" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-alpha.5r",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-alpha.5r.tgz",
        "shasum" : "094d001344ba1857b19c6a943949b879f833202b"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-alpha.5r",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-alpha.5r_1523425969823_0.716644474951514"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "24.0.0-alpha.16" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.16",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.16.tgz",
        "shasum" : "cb681b24c5520c31458c4df9274f6f1f68815f99"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "lerna/3.10.5/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.16",
      "gitHead" : "634e5a54f46b2a62d1dc81a170562e6f4e55ad60",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.16_1548423723701_0.7082266533575321"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.15" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.15",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.15.tgz",
        "shasum" : "b677da08e7ff63beebc2c7cc8cec52bdafd44fd4"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "lerna/3.10.5/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.15",
      "gitHead" : "28971c5f794330e8acc6861288e6daafcd32238e",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.15_1548352352669_0.8565869268003767"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.12" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.12",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.12.tgz",
        "shasum" : "eb3e3ccadbe7fe823bf5604de9e123abdf9b2d35"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.12",
      "gitHead" : "4f2bcb861d1f0fb150c05970362e52a38c31f67e",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.12_1547218879190_0.3313568015150097"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.13" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.13",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.13.tgz",
        "shasum" : "f1bcbcbbfafd4cc1d4d871047d56f0fedbd030d6"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "lerna/3.10.5/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.13",
      "gitHead" : "6de22dde9a10f775adc7b6f80080bdd224f6ae31",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.13_1548256528812_0.6154443589171268"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "4.2.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "4.2.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-4.2.0.tgz",
        "shasum" : "6e2adb73eb423cbcc52077705d68c7504332013b"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^15.1.1",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.8",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@4.2.0",
      "gitHead" : "a870fef3ddcfb0fc77b84e391dcbeebfa02e19f5",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-4.2.0.tgz_1474431819370_0.05452787992544472"
      },
      "_shasum" : "6e2adb73eb423cbcc52077705d68c7504332013b",
      "jest" : {
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.6.0"
    },
    "20.0.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.0.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.0.2.tgz",
        "shasum" : "91831cb1d8fbedb783b58a1e3fcdf88c1bd7cfd1"
      },
      "dependencies" : {
        "ansi-regex" : "^2.1.1",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "fb",
        "email" : "opensource+npm@fb.com"
      } ],
      "directories" : {
      },
      "scripts" : {
      },
      "_from" : ".",
      "_npmVersion" : "4.2.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.0.2",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-20.0.2.tgz_1495018221751_0.7365539520978928"
      },
      "_shasum" : "91831cb1d8fbedb783b58a1e3fcdf88c1bd7cfd1",
      "_nodeVersion" : "7.10.0"
    },
    "24.0.0-alpha.10" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.10",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.10.tgz",
        "shasum" : "9e6b234714171b275148e36ad6524c8b6ab984b5"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.10",
      "gitHead" : "722049ccd66947d48296dcb666bc99fccab86065",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.10_1547053470936_0.439009740803185"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "4.2.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "4.2.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-4.2.1.tgz",
        "shasum" : "b1dad18c3be0c8209e64c7791fa67e252d2d3e07"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^15.1.1",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.8",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@4.2.1",
      "gitHead" : "03fe50978332e63fb6b1107cf86d7744561dd22e",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-4.2.1.tgz_1474439807179_0.30846197600476444"
      },
      "_shasum" : "b1dad18c3be0c8209e64c7791fa67e252d2d3e07",
      "jest" : {
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.6.0"
    },
    "20.0.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.0.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.0.3.tgz",
        "shasum" : "020e350a560a1fe1a98dc3beb6ccffb386de8b14"
      },
      "dependencies" : {
        "ansi-regex" : "^2.1.1",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "fb",
        "email" : "opensource+npm@fb.com"
      } ],
      "directories" : {
      },
      "scripts" : {
      },
      "_from" : ".",
      "_npmVersion" : "4.2.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.0.3",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-20.0.3.tgz_1495018631891_0.5346766302827746"
      },
      "_shasum" : "020e350a560a1fe1a98dc3beb6ccffb386de8b14",
      "_nodeVersion" : "7.10.0"
    },
    "24.0.0-alpha.11" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.0.0-alpha.11",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.0.0-alpha.11.tgz",
        "shasum" : "5127d0bf9f712e3c9f5cc5df5ae4a2fc46dfacaa"
      },
      "dependencies" : {
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.0.0-alpha.11",
      "gitHead" : "6a066c6afe2ae08669a27d3b703a6cf0d898e7b7",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.0.0-alpha.11_1547145307057_0.6328115400351251"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.9.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.9.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.9.0.tgz",
        "shasum" : "12fac31b37019a4eea3c11aa9a959eb7628aa7c9"
      },
      "dependencies" : {
        "@jest/types" : "^24.9.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0",
        "react-is" : "^16.8.4"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-is" : "^16.7.1",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      }, {
        "email" : "scott.hovestadt@gmail.com",
        "name" : "scotthovestadt"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.15.0/node@v11.12.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "scotthovestadt",
        "email" : "scott.hovestadt@gmail.com"
      },
      "_id" : "pretty-format@24.9.0",
      "gitHead" : "9ad0f4bc6b8bdd94989804226c28c9960d9da7d1",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.9.0_1565934954829_0.4757742416820441"
      },
      "_nodeVersion" : "11.12.0"
    },
    "4.2.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "4.2.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-4.2.2.tgz",
        "shasum" : "f80bf8d98a6f4d20997a51d18bf331f2ad789a64"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^15.1.1",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.8",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@4.2.2",
      "gitHead" : "e593df850acd3a8087e3eb5fc46f66e7c93c3426",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-4.2.2.tgz_1478041303477_0.29300490533933043"
      },
      "_shasum" : "f80bf8d98a6f4d20997a51d18bf331f2ad789a64",
      "jest" : {
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.9.1"
    },
    "20.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.0.0.tgz",
        "shasum" : "bd100f330e707e4f49fef3f234d6e915242a6e7e"
      },
      "dependencies" : {
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "fb",
        "email" : "opensource+npm@fb.com"
      } ],
      "directories" : {
      },
      "scripts" : {
      },
      "_from" : ".",
      "_npmVersion" : "4.2.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.0.0",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-20.0.0.tgz_1494073956310_0.3826066949404776"
      },
      "_shasum" : "bd100f330e707e4f49fef3f234d6e915242a6e7e",
      "_nodeVersion" : "7.9.0"
    },
    "4.2.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "4.2.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-4.2.3.tgz",
        "shasum" : "8894c2ac81419cf801629d8f66320a25380d8b05"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^15.1.1",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.8",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@4.2.3",
      "gitHead" : "ef22c76692bae5e111cd7432b3dd694f5c4d0f12",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-4.2.3.tgz_1478801682352_0.8379785239230841"
      },
      "_shasum" : "8894c2ac81419cf801629d8f66320a25380d8b05",
      "jest" : {
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.9.1"
    },
    "20.0.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.0.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.0.1.tgz",
        "shasum" : "ba95329771907c189643dd251e244061ff642350"
      },
      "dependencies" : {
        "ansi-regex" : "^2.1.1",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "fb",
        "email" : "opensource+npm@fb.com"
      } ],
      "directories" : {
      },
      "scripts" : {
      },
      "_from" : ".",
      "_npmVersion" : "4.2.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.0.1",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-20.0.1.tgz_1494499807965_0.6633350073825568"
      },
      "_shasum" : "ba95329771907c189643dd251e244061ff642350",
      "_nodeVersion" : "7.9.0"
    },
    "24.5.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.5.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.5.0.tgz",
        "shasum" : "cc69a0281a62cd7242633fc135d6930cd889822d"
      },
      "dependencies" : {
        "@jest/types" : "^24.5.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0",
        "react-is" : "^16.8.4"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-is" : "^16.7.1",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.5.0",
      "gitHead" : "800533020f5b2f153615c821ed7cb12fd868fa6f",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.5.0_1552408587076_0.3403435260679679"
      },
      "_nodeVersion" : "8.11.3"
    },
    "3.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.0.0.tgz",
        "shasum" : "52db9fe7e9e6393b0387a218ebc085d99fe7d160"
      },
      "dependencies" : {
        "lodash" : "^4.13.1"
      },
      "devDependencies" : {
        "mocha" : "^2.1.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "mocha test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.3",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@3.0.0",
      "gitHead" : "247edd4f36664cd60407a310d4ca835218034cb8",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.0.0.tgz_1465850033484_0.756478788331151"
      },
      "_shasum" : "52db9fe7e9e6393b0387a218ebc085d99fe7d160",
      "_nodeVersion" : "5.10.1"
    },
    "3.4.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.4.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.4.1.tgz",
        "shasum" : "e0a39a07407c6f8c38b07cbfee2df9907939c7f8"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^12.1.0",
        "left-pad" : "^1.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.9.5",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@3.4.1",
      "gitHead" : "a8de0a5fc54bd9014f66d7a51c2ec5b63fb4a101",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.4.1.tgz_1467654558509_0.23463946976698935"
      },
      "_shasum" : "e0a39a07407c6f8c38b07cbfee2df9907939c7f8",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.2.2"
    },
    "3.4.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.4.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.4.2.tgz",
        "shasum" : "186dbba514433bac3b3b616f8c806a0d5834ab3f"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^12.1.0",
        "left-pad" : "^1.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.9.5",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@3.4.2",
      "gitHead" : "06b59f7d1d610f85753908dc5b275e76025d668c",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.4.2.tgz_1467769452652_0.2976850795093924"
      },
      "_shasum" : "186dbba514433bac3b3b616f8c806a0d5834ab3f",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.2.2"
    },
    "3.4.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.4.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.4.3.tgz",
        "shasum" : "1f5be6a5c252099a5920d3093fef60845f2286ab"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^12.1.0",
        "left-pad" : "^1.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.9.5",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@3.4.3",
      "gitHead" : "d1f6f577307decbce99bf256274e4f2920df3725",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.4.3.tgz_1467786479000_0.7793948103208095"
      },
      "_shasum" : "1f5be6a5c252099a5920d3093fef60845f2286ab",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.2.2"
    },
    "3.8.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.8.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.8.0.tgz",
        "shasum" : "bfbed56d5e9a776645f4b1ff7aa1a3ac4fa3c385"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^15.1.1",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.6",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@3.8.0",
      "gitHead" : "556f97f5ba896f15bf8e07e191636d31828f63a8",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.8.0.tgz_1473558204046_0.3871619531419128"
      },
      "_shasum" : "bfbed56d5e9a776645f4b1ff7aa1a3ac4fa3c385",
      "jest" : {
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "5.12.0"
    },
    "19.1.0-alpha.eed82034" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "19.1.0-alpha.eed82034",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-19.1.0-alpha.eed82034.tgz",
        "shasum" : "970654771b23bb904f7362f814c38c95e339cd1d"
      },
      "dependencies" : {
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "fb",
        "email" : "opensource+npm@fb.com"
      } ],
      "directories" : {
      },
      "scripts" : {
      },
      "_from" : ".",
      "_npmVersion" : "4.1.2",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@19.1.0-alpha.eed82034",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-19.1.0-alpha.eed82034.tgz_1489711281837_0.8856345196254551"
      },
      "_shasum" : "970654771b23bb904f7362f814c38c95e339cd1d",
      "_nodeVersion" : "7.7.2"
    },
    "21.2.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.2.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.2.1.tgz",
        "shasum" : "ae5407f3cf21066cd011aa1ba5fce7b6a2eddb36"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.2.1",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.2.1.tgz_1506550502084_0.2247674383688718"
      },
      "_nodeVersion" : "8.4.0"
    },
    "3.4.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.4.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.4.0.tgz",
        "shasum" : "81f5266888e6d51515c8d6728228cb50bf9730e8"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^12.1.0",
        "left-pad" : "^1.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.9.5",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@3.4.0",
      "gitHead" : "12988cafd9b8dce7c58cc47491f08fedbafae658",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.4.0.tgz_1467492135459_0.17039876943454146"
      },
      "_shasum" : "81f5266888e6d51515c8d6728228cb50bf9730e8",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.2.2"
    },
    "21.2.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.2.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.2.0.tgz",
        "shasum" : "8ca29556ad13eed5db48a3096b98bab9c321c6fa"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.2.0",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.2.0.tgz_1506457337974_0.018551710061728954"
      },
      "_nodeVersion" : "8.4.0"
    },
    "22.4.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "22.4.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-22.4.0.tgz",
        "shasum" : "237b1f7e1c50ed03bc65c03ccc29d7c8bb7beb94"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@22.4.0",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_22.4.0_1519128211238_0.3710352585898531"
      },
      "_nodeVersion" : "8.9.1"
    },
    "22.0.5" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "22.0.5",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-22.0.5.tgz",
        "shasum" : "8bad3f12b2b84c76fc57a976bde6770eb4043c69"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@22.0.5",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-22.0.5.tgz_1515510592727_0.8857751328032464"
      },
      "_nodeVersion" : "8.9.1"
    },
    "22.0.6" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "22.0.6",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-22.0.6.tgz",
        "shasum" : "bbb78e38445f263c2d3b9e281f4b844380990720"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@22.0.6",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-22.0.6.tgz_1515664005346_0.2216013662982732"
      },
      "_nodeVersion" : "9.3.0"
    },
    "18.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "18.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-18.0.0.tgz",
        "shasum" : "5f45c59fe2ed6749d46765429679670b08b21137"
      },
      "dependencies" : {
        "ansi-styles" : "^2.2.1"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "../../packages/jest-cli/bin/jest.js",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.9",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@18.0.0",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-18.0.0.tgz_1481801077732_0.5574890447314829"
      },
      "_shasum" : "5f45c59fe2ed6749d46765429679670b08b21137",
      "_nodeVersion" : "7.2.0"
    },
    "22.4.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "22.4.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-22.4.3.tgz",
        "shasum" : "f873d780839a9c02e9664c8a082e9ee79eaac16f"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@22.4.3",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_22.4.3_1521648490562_0.8268179225620371"
      },
      "_nodeVersion" : "8.9.1"
    },
    "23.0.0-beta.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-beta.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-beta.2.tgz",
        "shasum" : "fe04b98bfb7ae8ec7a46615f36c36901b59de5a9"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-beta.2",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-beta.2_1524777457327_0.08931287476959171"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "22.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "22.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-22.0.0.tgz",
        "shasum" : "3c1da8d100e7e0b0ff1d839f4743b002d5907531"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@22.0.0",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-22.0.0.tgz_1513595004523_0.2027169002685696"
      },
      "_nodeVersion" : "8.9.1"
    },
    "22.0.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "22.0.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-22.0.1.tgz",
        "shasum" : "65074c3946f544f6cd8445581293f532e0b3761c"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@22.0.1",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-22.0.1.tgz_1513628965104_0.48569458769634366"
      },
      "_nodeVersion" : "9.2.1"
    },
    "22.0.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "22.0.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-22.0.2.tgz",
        "shasum" : "c8a2fa835682ad259badd8ad70093f69a0704bad"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@22.0.2",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-22.0.2.tgz_1513691584424_0.41861588321626186"
      },
      "_nodeVersion" : "9.2.1"
    },
    "23.0.0-beta.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-beta.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-beta.1.tgz",
        "shasum" : "f71c105088a74509cf8a8df49612abaf00b017a4"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-beta.1",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-beta.1_1524325464570_0.7195881897469456"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "22.0.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "22.0.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-22.0.3.tgz",
        "shasum" : "a2bfa59fc33ad24aa4429981bb52524b41ba5dd7"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@22.0.3",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-22.0.3.tgz_1513695534694_0.9589479956775904"
      },
      "_nodeVersion" : "9.2.1"
    },
    "23.0.0-beta.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-beta.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-beta.0.tgz",
        "shasum" : "9a61b677f3b61e16001d288aeb51a15d6c9c83b2"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-beta.0",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-beta.0_1524219047082_0.4477683770943728"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "23.2.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.2.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.2.0.tgz",
        "shasum" : "3b0aaa63c018a53583373c1cb3a5d96cc5e83017"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.2.0",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.2.0_1529935516862_0.6045534628074585"
      }
    },
    "23.0.0-alpha.3r" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-alpha.3r",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-alpha.3r.tgz",
        "shasum" : "c32c5faf5cd5a88c2b286aefe061644df7e434ce"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-alpha.3r",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-alpha.3r_1525093812918_0.42840596561445365"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "1.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "1.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "dist/pretty-format.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-1.0.0.tgz",
        "shasum" : "ce2aa8e552a93cb0d20f23c625313a843d657a77"
      },
      "dependencies" : {
        "lodash" : "^3.4.0"
      },
      "devDependencies" : {
        "babel" : "^4.3.0",
        "babelify" : "^5.0.3",
        "browserify" : "^8.1.1",
        "chai" : "^2.0.0",
        "del" : "^1.1.1",
        "esperanto" : "^0.6.7",
        "glob" : "^4.3.5",
        "gulp" : "^3.8.10",
        "gulp-babel" : "^4.0.0",
        "gulp-file" : "^0.2.0",
        "gulp-filter" : "^2.0.0",
        "gulp-istanbul" : "^0.6.0",
        "gulp-jscs" : "^1.4.0",
        "gulp-jshint" : "^1.9.0",
        "gulp-livereload" : "^3.4.0",
        "gulp-load-plugins" : "^0.8.0",
        "gulp-mocha" : "^2.0.0",
        "gulp-notify" : "^2.1.0",
        "gulp-plumber" : "^0.6.6",
        "gulp-rename" : "^1.2.0",
        "gulp-sourcemaps" : "^1.3.0",
        "gulp-uglifyjs" : "^0.6.0",
        "isparta" : "^2.2.0",
        "jshint-stylish" : "^1.0.0",
        "mkdirp" : "^0.5.0",
        "mocha" : "^2.1.0",
        "run-sequence" : "^1.0.2",
        "sinon" : "^1.12.2",
        "sinon-chai" : "^2.7.0",
        "vinyl-source-stream" : "^1.0.0"
      },
      "keywords" : [ "boilerplate", "es6", "node", "starter", "kit", "transpile", "6to5", "babel" ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "gulp",
        "test-browser" : "gulp test-browser",
        "build" : "gulp build",
        "coverage" : "gulp coverage"
      },
      "_from" : ".",
      "_npmVersion" : "2.3.0",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@1.0.0",
      "gitHead" : "f5033177cce46717f1883ca3bfb17a2c39b495a1",
      "_shasum" : "ce2aa8e552a93cb0d20f23c625313a843d657a77",
      "babelBoilerplateOptions" : {
        "entryFileName" : "pretty-format",
        "exportVarName" : "PrettyFormat",
        "mochaGlobals" : [ "stub", "spy", "expect" ]
      },
      "_nodeVersion" : "0.10.36"
    },
    "23.6.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.6.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.6.0.tgz",
        "shasum" : "5eaac8eeb6b33b987b7fe6097ea6a8a146ab5760"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.6.0",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.6.0_1536583373092_0.039146124648338665"
      },
      "_nodeVersion" : "8.9.1"
    },
    "23.0.0-charlie.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-charlie.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-charlie.2.tgz",
        "shasum" : "ab87c9fd8ff445bd2ace394c84000201a041f217"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-charlie.2",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-charlie.2_1526377887160_0.16335274965802293"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "23.0.0-charlie.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-charlie.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-charlie.3.tgz",
        "shasum" : "b251f1bdd5da81110c8d48842ac722405085f5fc"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-charlie.3",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-charlie.3_1527001141117_0.6048019972719636"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "23.0.0-charlie.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-charlie.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-charlie.0.tgz",
        "shasum" : "4b3d1f9f7aa61db4aeab3a75a993c036b98c1477"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-charlie.0",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-charlie.0_1525258583633_0.7890023758873661"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "23.0.0-charlie.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-charlie.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-charlie.1.tgz",
        "shasum" : "cb5fde20ad5f5d2e38197c5f07340e694233e986"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-charlie.1",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-charlie.1_1525349415837_0.9022465978031704"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "24.6.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.6.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.6.0.tgz",
        "shasum" : "66124fe5ea5c4d473337a204ece220e8fdc9806c"
      },
      "dependencies" : {
        "@jest/types" : "^24.6.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0",
        "react-is" : "^16.8.4"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-is" : "^16.7.1",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      }, {
        "email" : "scott.hovestadt@gmail.com",
        "name" : "scotthovestadt"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.6.0",
      "gitHead" : "04e6a66d2ba8b18bee080bb28547db74a255d2c7",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.6.0_1554157582735_0.10815463953542226"
      },
      "_nodeVersion" : "8.11.3"
    },
    "4.3.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "4.3.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-4.3.0.tgz",
        "shasum" : "67d3de28fd37957ada895b94452ae539396d97c8"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^15.1.1",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.9",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@4.3.0",
      "gitHead" : "8e3c166225d556a49e835db7919a346fd0a0cb11",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-4.3.0.tgz_1479452901694_0.7598880641162395"
      },
      "_shasum" : "67d3de28fd37957ada895b94452ae539396d97c8",
      "jest" : {
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "7.1.0"
    },
    "4.3.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "4.3.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-4.3.1.tgz",
        "shasum" : "530be5c42b3c05b36414a7a2a4337aa80acd0e8d"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^15.1.1",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.9",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@4.3.1",
      "gitHead" : "49ae3bab31388b5633c3029203e573f59d59f4a1",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-4.3.1.tgz_1479479968899_0.5202373208012432"
      },
      "_shasum" : "530be5c42b3c05b36414a7a2a4337aa80acd0e8d",
      "jest" : {
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "7.1.0"
    },
    "21.0.0-beta.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.0.0-beta.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.0.0-beta.1.tgz",
        "shasum" : "53fb4572e1ab46b44cad62fd91863f4cd9d40225"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.0.0-beta.1",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.0.0-beta.1.tgz_1503610009937_0.9285495886579156"
      },
      "_nodeVersion" : "8.4.0"
    },
    "21.3.0-beta.12" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.12",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.12.tgz",
        "shasum" : "fc74dd91aa8a0af1667abd705d59fa31b9295616"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.12",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.12.tgz_1512499714975_0.8375277179293334"
      },
      "_nodeVersion" : "8.9.1"
    },
    "21.3.0-beta.13" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.13",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.13.tgz",
        "shasum" : "e67a45a517de01a119ddb02804cd7232efea34af"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.13",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.13.tgz_1512571028845_0.16150664957240224"
      },
      "_nodeVersion" : "8.9.1"
    },
    "21.3.0-beta.14" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.14",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.14.tgz",
        "shasum" : "21ae2e5d29656d54498b7b0ccefda842810eeba5"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.14",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.14.tgz_1513075955153_0.6669253744184971"
      },
      "_nodeVersion" : "9.2.1"
    },
    "21.3.0-beta.15" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.15",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.15.tgz",
        "shasum" : "702708a64be53619b2c10138dc5a594056fd1569"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.15",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.15.tgz_1513344458991_0.48647130909375846"
      },
      "_nodeVersion" : "9.2.1"
    },
    "25.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "25.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 8"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-25.0.0.tgz",
        "shasum" : "d127ef4972649531cc6eeb55c9e0d250350c48e7"
      },
      "dependencies" : {
        "@jest/types" : "^25.0.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^4.0.0",
        "react-is" : "^16.8.4"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-is" : "^16.7.1",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      }, {
        "email" : "scott.hovestadt@gmail.com",
        "name" : "scotthovestadt"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v11.12.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "scotthovestadt",
        "email" : "scott.hovestadt@gmail.com"
      },
      "_id" : "pretty-format@25.0.0",
      "gitHead" : "ff9269be05fd8316e95232198fce3463bf2f270e",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_25.0.0_1566444240697_0.5785760721309063"
      },
      "readme" : "# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "11.12.0"
    },
    "3.5.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.5.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.5.0.tgz",
        "shasum" : "1d795f73086faae09df6c40feb1698134df9ba2d"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^13.2.3",
        "left-pad" : "^1.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@3.5.0",
      "gitHead" : "38b091e8d1bb50f9ec3435cef6c72bd124859f9c",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.5.0.tgz_1467966560716_0.14394370932132006"
      },
      "_shasum" : "1d795f73086faae09df6c40feb1698134df9ba2d",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.3.0"
    },
    "3.5.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.5.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.5.1.tgz",
        "shasum" : "a3f5239a15bed8f56c70d313467616771ca26cc0"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^13.2.3",
        "left-pad" : "^1.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.6",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@3.5.1",
      "gitHead" : "8487a02de74e5747bd0a7e8491ed2eef1ed952f9",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.5.1.tgz_1470071183130_0.9069960319902748"
      },
      "_shasum" : "a3f5239a15bed8f56c70d313467616771ca26cc0",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "5.12.0"
    },
    "3.5.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.5.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.5.2.tgz",
        "shasum" : "e97a0285f076a4ed722406522f9116773d169310"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^14.1.0",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@3.5.2",
      "gitHead" : "ee8df7bead23e719db01719ecc23ed8c71ba1ffc",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.5.2.tgz_1470279216845_0.8327156249433756"
      },
      "_shasum" : "e97a0285f076a4ed722406522f9116773d169310",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "6.3.0"
    },
    "3.5.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.5.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.5.3.tgz",
        "shasum" : "539dfe29335c42f18c233dcca23eebcc1d41f1c8"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^14.1.0",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.6",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@3.5.3",
      "gitHead" : "973e169d9d8f7c78758972c68406e5c7ff891276",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.5.3.tgz_1470875030957_0.45410665567032993"
      },
      "_shasum" : "539dfe29335c42f18c233dcca23eebcc1d41f1c8",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "5.12.0"
    },
    "3.1.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.1.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.1.0.tgz",
        "shasum" : "1fc982197f0e8da0dae57da0cb65cd03db25f20e"
      },
      "dependencies" : {
        "lodash" : "^4.13.1"
      },
      "devDependencies" : {
        "mocha" : "^2.1.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "mocha test.js"
      },
      "_from" : ".",
      "_npmVersion" : "2.14.9",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@3.1.0",
      "gitHead" : "bc0c4d481a51204724019a526c9164eaa48817ed",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.1.0.tgz_1465878718616_0.28907121275551617"
      },
      "_shasum" : "1fc982197f0e8da0dae57da0cb65cd03db25f20e",
      "_nodeVersion" : "0.12.9"
    },
    "21.1.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.1.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.1.0.tgz",
        "shasum" : "557428254323832ee8b7c971cb613442bea67f61"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.1.0",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.1.0.tgz_1505353814511_0.45887886406853795"
      },
      "_nodeVersion" : "8.4.0"
    },
    "21.3.0-beta.10" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.10",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.10.tgz",
        "shasum" : "6899d96e7b41420cdae15813f5695969e211b5bc"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.10",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.10.tgz_1511613564251_0.8827821186278015"
      },
      "_nodeVersion" : "8.9.1"
    },
    "23.0.0-charlie.4" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-charlie.4",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-charlie.4.tgz",
        "shasum" : "9b3f34aa66113f497b637a9b72a9c8a5ff749d0d"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-charlie.4",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-charlie.4_1527072146060_0.2617374969989241"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "21.3.0-beta.11" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-beta.11",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-beta.11.tgz",
        "shasum" : "3a32f4b33b868e20f73018de91a27cc2764643f4"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-beta.11",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-beta.11.tgz_1511965880572_0.03304202784784138"
      },
      "_nodeVersion" : "8.9.1"
    },
    "24.2.0-alpha.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.2.0-alpha.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.2.0-alpha.0.tgz",
        "shasum" : "2002b94909973e765d7a05d28770eb17ade476a4"
      },
      "dependencies" : {
        "@jest/types" : "^24.2.0-alpha.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.2.0-alpha.0",
      "gitHead" : "800f2f803d01c8ae194d71b251e4965dd70e5bf2",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.2.0-alpha.0_1551797202724_0.37915218536956163"
      },
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "21.3.0-alpha.eff7a1cf" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-alpha.eff7a1cf",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-alpha.eff7a1cf.tgz",
        "shasum" : "c8d2648ce88753abcdfaa407b555b853db796068"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-alpha.eff7a1cf",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-alpha.eff7a1cf.tgz_1506876408988_0.26944437134079635"
      },
      "_nodeVersion" : "8.4.0"
    },
    "18.1.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "18.1.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-18.1.0.tgz",
        "shasum" : "fb65a86f7a7f9194963eee91865c1bcf1039e284"
      },
      "dependencies" : {
        "ansi-styles" : "^2.2.1"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "../../packages/jest-cli/bin/jest.js",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.10.10",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@18.1.0",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-18.1.0.tgz_1482976055665_0.7535617861431092"
      },
      "_shasum" : "fb65a86f7a7f9194963eee91865c1bcf1039e284",
      "_nodeVersion" : "7.3.0"
    },
    "19.3.0-alpha.85402254" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "19.3.0-alpha.85402254",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-19.3.0-alpha.85402254.tgz",
        "shasum" : "e0cdbd5b0bd06242dc2c00434bed3f9124e6f108"
      },
      "dependencies" : {
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "fb",
        "email" : "opensource+npm@fb.com"
      } ],
      "directories" : {
      },
      "scripts" : {
      },
      "_from" : ".",
      "_npmVersion" : "4.2.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@19.3.0-alpha.85402254",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-19.3.0-alpha.85402254.tgz_1493984901988_0.14289735327474773"
      },
      "_shasum" : "e0cdbd5b0bd06242dc2c00434bed3f9124e6f108",
      "_nodeVersion" : "7.9.0"
    },
    "19.2.0-alpha.993e64af" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "19.2.0-alpha.993e64af",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-19.2.0-alpha.993e64af.tgz",
        "shasum" : "e15683e06787f4656ccc5e6f850928a9dcd9e032"
      },
      "dependencies" : {
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "fb",
        "email" : "opensource+npm@fb.com"
      } ],
      "directories" : {
      },
      "scripts" : {
      },
      "_from" : ".",
      "_npmVersion" : "4.2.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@19.2.0-alpha.993e64af",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-19.2.0-alpha.993e64af.tgz_1493912259929_0.5100777607876807"
      },
      "_shasum" : "e15683e06787f4656ccc5e6f850928a9dcd9e032",
      "_nodeVersion" : "7.9.0"
    },
    "20.1.0-echo.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-echo.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-echo.1.tgz",
        "shasum" : "3b97907461d90a06b2e7531185cb1b529eb186f3"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@20.1.0-echo.1",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-echo.1.tgz_1502210993548_0.23874914622865617"
      },
      "_nodeVersion" : "8.1.4"
    },
    "23.0.0-beta.3r" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-beta.3r",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-beta.3r.tgz",
        "shasum" : "983b39930da7536a3ad40753128f563d37321c88"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-beta.3r",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-beta.3r_1525094095640_0.8607787653648153"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "20.1.0-beta.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-beta.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-beta.1.tgz",
        "shasum" : "4c8dbd96fde7b61b965e311af142a60235ecf72a"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.1.0-beta.1",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-beta.1.tgz_1499942021825_0.3699762055184692"
      },
      "_nodeVersion" : "8.1.4"
    },
    "23.5.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.5.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.5.0.tgz",
        "shasum" : "0f9601ad9da70fe690a269cd3efca732c210687c"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.5.0",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.5.0_1533909102720_0.21408303510420867"
      },
      "_nodeVersion" : "8.9.1"
    },
    "1.1.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "1.1.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "dist/pretty-format.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-1.1.0.tgz",
        "shasum" : "dafccca3f9922601c2090b411e312e88fd705262"
      },
      "dependencies" : {
        "lodash" : "^3.4.0"
      },
      "devDependencies" : {
        "babel" : "^4.3.0",
        "babelify" : "^5.0.3",
        "browserify" : "^8.1.1",
        "chai" : "^2.0.0",
        "del" : "^1.1.1",
        "esperanto" : "^0.6.7",
        "glob" : "^4.3.5",
        "gulp" : "^3.8.10",
        "gulp-babel" : "^4.0.0",
        "gulp-file" : "^0.2.0",
        "gulp-filter" : "^2.0.0",
        "gulp-istanbul" : "^0.6.0",
        "gulp-jscs" : "^1.4.0",
        "gulp-jshint" : "^1.9.0",
        "gulp-livereload" : "^3.4.0",
        "gulp-load-plugins" : "^0.8.0",
        "gulp-mocha" : "^2.0.0",
        "gulp-notify" : "^2.1.0",
        "gulp-plumber" : "^0.6.6",
        "gulp-rename" : "^1.2.0",
        "gulp-sourcemaps" : "^1.3.0",
        "gulp-uglifyjs" : "^0.6.0",
        "isparta" : "^2.2.0",
        "jshint-stylish" : "^1.0.0",
        "mkdirp" : "^0.5.0",
        "mocha" : "^2.1.0",
        "run-sequence" : "^1.0.2",
        "sinon" : "^1.12.2",
        "sinon-chai" : "^2.7.0",
        "vinyl-source-stream" : "^1.0.0"
      },
      "keywords" : [ "boilerplate", "es6", "node", "starter", "kit", "transpile", "6to5", "babel" ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "gulp",
        "test-browser" : "gulp test-browser",
        "build" : "gulp build",
        "coverage" : "gulp coverage"
      },
      "_from" : ".",
      "_npmVersion" : "2.3.0",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@1.1.0",
      "gitHead" : "57e24007ae9e526a847e1627ef9119bd983667ae",
      "_shasum" : "dafccca3f9922601c2090b411e312e88fd705262",
      "babelBoilerplateOptions" : {
        "entryFileName" : "pretty-format",
        "exportVarName" : "PrettyFormat",
        "mochaGlobals" : [ "stub", "spy", "expect" ]
      },
      "_nodeVersion" : "0.10.36"
    },
    "1.1.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "1.1.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "dist/pretty-format.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-1.1.1.tgz",
        "shasum" : "19235bc0abcb1926ea461c6e2584d9ff49ab126e"
      },
      "dependencies" : {
        "lodash" : "^3.4.0"
      },
      "devDependencies" : {
        "babel" : "^4.3.0",
        "babelify" : "^5.0.3",
        "browserify" : "^8.1.1",
        "chai" : "^2.0.0",
        "del" : "^1.1.1",
        "esperanto" : "^0.6.7",
        "glob" : "^4.3.5",
        "gulp" : "^3.8.10",
        "gulp-babel" : "^4.0.0",
        "gulp-file" : "^0.2.0",
        "gulp-filter" : "^2.0.0",
        "gulp-istanbul" : "^0.6.0",
        "gulp-jscs" : "^1.4.0",
        "gulp-jshint" : "^1.9.0",
        "gulp-livereload" : "^3.4.0",
        "gulp-load-plugins" : "^0.8.0",
        "gulp-mocha" : "^2.0.0",
        "gulp-notify" : "^2.1.0",
        "gulp-plumber" : "^0.6.6",
        "gulp-rename" : "^1.2.0",
        "gulp-sourcemaps" : "^1.3.0",
        "gulp-uglifyjs" : "^0.6.0",
        "isparta" : "^2.2.0",
        "jshint-stylish" : "^1.0.0",
        "mkdirp" : "^0.5.0",
        "mocha" : "^2.1.0",
        "run-sequence" : "^1.0.2",
        "sinon" : "^1.12.2",
        "sinon-chai" : "^2.7.0",
        "vinyl-source-stream" : "^1.0.0"
      },
      "keywords" : [ "boilerplate", "es6", "node", "starter", "kit", "transpile", "6to5", "babel" ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "gulp",
        "test-browser" : "gulp test-browser",
        "build" : "gulp build",
        "coverage" : "gulp coverage"
      },
      "_from" : ".",
      "_npmVersion" : "2.3.0",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@1.1.1",
      "gitHead" : "1f3cac5be4c339af4297f9b97e48a9e1c8307370",
      "_shasum" : "19235bc0abcb1926ea461c6e2584d9ff49ab126e",
      "babelBoilerplateOptions" : {
        "entryFileName" : "pretty-format",
        "exportVarName" : "PrettyFormat",
        "mochaGlobals" : [ "stub", "spy", "expect" ]
      },
      "_nodeVersion" : "0.10.36"
    },
    "20.1.0-alpha.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-alpha.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-alpha.1.tgz",
        "shasum" : "51092a6e850b27d0f9e94b03ad71350145dda215"
      },
      "dependencies" : {
        "ansi-regex" : "^2.1.1",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.1.0-alpha.1",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-alpha.1.tgz_1498644980434_0.827074789442122"
      },
      "_nodeVersion" : "8.1.2"
    },
    "21.3.0-alpha.1e3ee68e" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.3.0-alpha.1e3ee68e",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.3.0-alpha.1e3ee68e.tgz",
        "shasum" : "a3bad57fa8925ca2e7b5fe66454ac3d30371a314"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.3.0-alpha.1e3ee68e",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.3.0-alpha.1e3ee68e.tgz_1506608440405_0.08250383823178709"
      },
      "_nodeVersion" : "8.4.0"
    },
    "24.7.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.7.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.7.0.tgz",
        "shasum" : "d23106bc2edcd776079c2daa5da02bcb12ed0c10"
      },
      "dependencies" : {
        "@jest/types" : "^24.7.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0",
        "react-is" : "^16.8.4"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-is" : "^16.7.1",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      }, {
        "email" : "scott.hovestadt@gmail.com",
        "name" : "scotthovestadt"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v11.12.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "scotthovestadt",
        "email" : "scott.hovestadt@gmail.com"
      },
      "_id" : "pretty-format@24.7.0",
      "gitHead" : "eb0413622542bc0f70c32950d9daeeab9f6802ac",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.7.0_1554263717891_0.10220866426617281"
      },
      "_nodeVersion" : "11.12.0"
    },
    "4.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "4.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-4.0.0.tgz",
        "shasum" : "eef0236ad1672ee5d6f36629d3e9e2454d01266c"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^15.1.1",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.6",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@4.0.0",
      "gitHead" : "9b2e2f48d564a67848c72bf42160938867366c18",
      "_npmOperationalInternal" : {
        "host" : "packages-16-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-4.0.0.tgz_1473559349051_0.9919021637178957"
      },
      "_shasum" : "eef0236ad1672ee5d6f36629d3e9e2454d01266c",
      "jest" : {
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "5.12.0"
    },
    "20.1.0-alpha.3" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-alpha.3",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-alpha.3.tgz",
        "shasum" : "ea1dd3874bc638c5d6237528ca2f6a087923257d"
      },
      "dependencies" : {
        "ansi-regex" : "^2.1.1",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.1.0-alpha.3",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-alpha.3.tgz_1498832453553_0.9796057401690632"
      },
      "_nodeVersion" : "8.1.2"
    },
    "20.1.0-alpha.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-alpha.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-alpha.2.tgz",
        "shasum" : "f6c08b56fee1d84936a18fea2edd1e1a03faaa5a"
      },
      "dependencies" : {
        "ansi-regex" : "^2.1.1",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.1.0-alpha.2",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-alpha.2.tgz_1498754206978_0.7984285997226834"
      },
      "_nodeVersion" : "8.1.2"
    },
    "24.3.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.3.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.3.0.tgz",
        "shasum" : "e7eaefecd28d714fc6425dc2d5f9ed30e1188b26"
      },
      "dependencies" : {
        "@jest/types" : "^24.3.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.3.0",
      "gitHead" : "3a7a4f3a3f5489ac8e07dcddf76bb949c482ec87",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.3.0_1551963579497_0.521788719833167"
      },
      "_nodeVersion" : "8.11.3"
    },
    "24.3.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "24.3.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-24.3.1.tgz",
        "shasum" : "ae4a98e93d73d86913a8a7dd1a7c3c900f8fda59"
      },
      "dependencies" : {
        "@jest/types" : "^24.3.0",
        "ansi-regex" : "^4.0.0",
        "ansi-styles" : "^3.2.0",
        "react-is" : "^16.8.4"
      },
      "devDependencies" : {
        "@types/ansi-regex" : "^4.0.0",
        "@types/ansi-styles" : "^3.2.1",
        "@types/react" : "*",
        "@types/react-is" : "^16.7.1",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "pretty-format@24.3.1",
      "gitHead" : "65c6e9d5e398711c011078bb72648c77fc8a8cb3",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_24.3.1_1552000340349_0.3039072455196825"
      },
      "_nodeVersion" : "8.11.3"
    },
    "23.0.0-alpha.6r" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0-alpha.6r",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0-alpha.6r.tgz",
        "shasum" : "a50d8381a231f8ae231a8255d7e3de7a6c0d2fe5"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0-alpha.6r",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0-alpha.6r_1523516494617_0.22010912614011202"
      },
      "readmeFilename" : "README.md",
      "readme" : "# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n"
    },
    "3.6.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.6.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.6.0.tgz",
        "shasum" : "c1c06ee737a3281971c89e0f25cc1387ea4d5d80"
      },
      "devDependencies" : {
        "chalk" : "^1.1.3",
        "jest" : "^14.1.0",
        "left-pad" : "^1.1.1",
        "react" : "15.3.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "jest",
        "perf" : "node perf/test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.6",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@3.6.0",
      "gitHead" : "a0c81c42ba2d62e61a5eecbc39c6f5cb475df67d",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.6.0.tgz_1471465208714_0.31411029887385666"
      },
      "_shasum" : "c1c06ee737a3281971c89e0f25cc1387ea4d5d80",
      "jest" : {
        "automock" : false,
        "testEnvironment" : "node",
        "verbose" : true
      },
      "_nodeVersion" : "5.12.0"
    },
    "21.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.0.0.tgz",
        "shasum" : "bea1522c4c47e49b44db5b6fbf83e7737251f305"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.0.0",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.0.0.tgz_1504537314379_0.43319351389072835"
      },
      "_nodeVersion" : "8.4.0"
    },
    "25.1.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "25.1.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/pretty-format"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "engines" : {
        "node" : ">= 8.3"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-25.1.0.tgz",
        "shasum" : "ed869bdaec1356fc5ae45de045e2c8ec7b07b0c8"
      },
      "dependencies" : {
        "@jest/types" : "^25.1.0",
        "ansi-regex" : "^5.0.0",
        "ansi-styles" : "^4.0.0",
        "react-is" : "^16.12.0"
      },
      "devDependencies" : {
        "@types/react" : "*",
        "@types/react-is" : "^16.7.1",
        "@types/react-test-renderer" : "*",
        "immutable" : "4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "davidzilburg@gmail.com",
        "name" : "davidzilburg"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "rubennorte@gmail.com",
        "name" : "rubennorte"
      }, {
        "email" : "scott.hovestadt@gmail.com",
        "name" : "scotthovestadt"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v10.16.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "davidzilburg",
        "email" : "davidzilburg@gmail.com"
      },
      "_id" : "pretty-format@25.1.0",
      "gitHead" : "170eee11d03b0ed5c60077982fdbc3bafd403638",
      "types" : "build/index.d.ts",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_25.1.0_1579654793256_0.9387436370817765"
      },
      "_nodeVersion" : "10.16.0"
    },
    "3.2.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "3.2.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-3.2.0.tgz",
        "shasum" : "30ba2f8ded37451af53d632fee1fe34b660a285f"
      },
      "dependencies" : {
        "lodash" : "^4.13.1"
      },
      "devDependencies" : {
        "mocha" : "^2.1.0",
        "react" : "15.2.0-rc.1"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "mocha test.js test-plugins-ReactTestComponent.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.6",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@3.2.0",
      "gitHead" : "9254efec454215c5c2c1789b0c679c9b8d0b14ec",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-3.2.0.tgz_1465961024482_0.2189729092642665"
      },
      "_shasum" : "30ba2f8ded37451af53d632fee1fe34b660a285f",
      "_nodeVersion" : "6.0.0"
    },
    "21.0.2" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "21.0.2",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-21.0.2.tgz",
        "shasum" : "76adcebd836c41ccd2e6b626e70f63050d2a3534"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      }, {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@21.0.2",
      "browser" : "build-es5/index.js",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-21.0.2.tgz_1504880367068_0.5469620125368237"
      },
      "_nodeVersion" : "8.4.0"
    },
    "2.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "2.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-2.0.0.tgz",
        "shasum" : "040492380331ffffccd75e153dac72dbcc7ec378"
      },
      "dependencies" : {
        "lodash" : "^4.13.1"
      },
      "devDependencies" : {
        "mocha" : "^2.1.0"
      },
      "keywords" : [ ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "mocha test.js"
      },
      "_from" : ".",
      "_npmVersion" : "3.8.3",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@2.0.0",
      "gitHead" : "37d2b08cf05dba367d026d5921e3e6f4505689de",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-2.0.0.tgz_1464818545698_0.25608914671465755"
      },
      "_shasum" : "040492380331ffffccd75e153dac72dbcc7ec378",
      "_nodeVersion" : "5.10.1"
    },
    "18.5.0-alpha.7da3df39" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "18.5.0-alpha.7da3df39",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-18.5.0-alpha.7da3df39.tgz",
        "shasum" : "e990895d97195b0ff0cbd7d1dd8d8e179be43ce3"
      },
      "dependencies" : {
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
      },
      "_from" : ".",
      "_npmVersion" : "4.1.2",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@18.5.0-alpha.7da3df39",
      "_npmOperationalInternal" : {
        "host" : "packages-18-east.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-18.5.0-alpha.7da3df39.tgz_1487350677326_0.2225903368089348"
      },
      "_shasum" : "e990895d97195b0ff0cbd7d1dd8d8e179be43ce3",
      "_nodeVersion" : "7.5.0"
    },
    "23.0.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.1.tgz",
        "shasum" : "d61d065268e4c759083bccbca27a01ad7c7601f4"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.1",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.1_1527435057085_0.6097930469393269"
      }
    },
    "20.1.0-chi.1" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "20.1.0-chi.1",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-20.1.0-chi.1.tgz",
        "shasum" : "36439fb4ca2bb68e76a0d965170a354e7b2bfc99"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@20.1.0-chi.1",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format-20.1.0-chi.1.tgz_1500027904420_0.6980449620168656"
      },
      "_nodeVersion" : "8.1.4"
    },
    "23.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "23.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-23.0.0.tgz",
        "shasum" : "b66dc584a0907b1969783c4c20e4d1180b18ac75"
      },
      "dependencies" : {
        "ansi-regex" : "^3.0.0",
        "ansi-styles" : "^3.2.0"
      },
      "devDependencies" : {
        "immutable" : "^4.0.0-rc.9",
        "react" : "*",
        "react-dom" : "*",
        "react-test-renderer" : "*"
      },
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "aaron@abramov.io",
        "name" : "aaronabramov"
      }, {
        "email" : "christoph.pojer@gmail.com",
        "name" : "cpojer"
      }, {
        "email" : "opensource+npm@fb.com",
        "name" : "fb"
      }, {
        "email" : "jean@lauliac.com",
        "name" : "jeanlauliac"
      }, {
        "email" : "mjesun@hotmail.com",
        "name" : "mjesun"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "pretty-format@23.0.0",
      "browser" : "build-es5/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/pretty-format_23.0.0_1527182786416_0.3664543715646642"
      }
    },
    "19.0.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "19.0.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/facebook/jest#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "bugs" : {
        "url" : "https://github.com/facebook/jest/issues"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-19.0.0.tgz",
        "shasum" : "56530d32acb98a3fa4851c4e2b9d37b420684c84"
      },
      "dependencies" : {
        "ansi-styles" : "^3.0.0"
      },
      "license" : "BSD-3-Clause",
      "maintainers" : [ {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      }, {
        "name" : "dmitriiabramov",
        "email" : "dmitrii@rheia.us"
      }, {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
      },
      "_from" : ".",
      "_npmVersion" : "4.1.2",
      "_npmUser" : {
        "name" : "cpojer",
        "email" : "christoph.pojer@gmail.com"
      },
      "_id" : "pretty-format@19.0.0",
      "_npmOperationalInternal" : {
        "host" : "packages-12-west.internal.npmjs.com",
        "tmp" : "tmp/pretty-format-19.0.0.tgz_1487669430940_0.7767606938723475"
      },
      "_shasum" : "56530d32acb98a3fa4851c4e2b9d37b420684c84",
      "_nodeVersion" : "7.5.0"
    },
    "1.2.0" : {
      "name" : "pretty-format",
      "description" : "Stringify any JavaScript value.",
      "version" : "1.2.0",
      "author" : {
        "name" : "James Kyle",
        "email" : "me@thejameskyle.com"
      },
      "homepage" : "https://github.com/thejameskle/pretty-format",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/thejameskyle/pretty-format.git"
      },
      "bugs" : {
        "url" : "https://github.com/thejameskyle/pretty-format/issues"
      },
      "main" : "dist/pretty-format.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/pretty-format/-/pretty-format-1.2.0.tgz",
        "shasum" : "69376de6b777da76ed273f7ed5d76289f115cdb9"
      },
      "dependencies" : {
        "lodash" : "^3.4.0"
      },
      "devDependencies" : {
        "babel" : "^4.3.0",
        "babelify" : "^5.0.3",
        "browserify" : "^8.1.1",
        "chai" : "^2.0.0",
        "del" : "^1.1.1",
        "esperanto" : "^0.6.7",
        "glob" : "^4.3.5",
        "gulp" : "^3.8.10",
        "gulp-babel" : "^4.0.0",
        "gulp-file" : "^0.2.0",
        "gulp-filter" : "^2.0.0",
        "gulp-istanbul" : "^0.6.0",
        "gulp-jscs" : "^1.4.0",
        "gulp-jshint" : "^1.9.0",
        "gulp-livereload" : "^3.4.0",
        "gulp-load-plugins" : "^0.8.0",
        "gulp-mocha" : "^2.0.0",
        "gulp-notify" : "^2.1.0",
        "gulp-plumber" : "^0.6.6",
        "gulp-rename" : "^1.2.0",
        "gulp-sourcemaps" : "^1.3.0",
        "gulp-uglifyjs" : "^0.6.0",
        "isparta" : "^2.2.0",
        "jshint-stylish" : "^1.0.0",
        "mkdirp" : "^0.5.0",
        "mocha" : "^2.1.0",
        "run-sequence" : "^1.0.2",
        "sinon" : "^1.12.2",
        "sinon-chai" : "^2.7.0",
        "vinyl-source-stream" : "^1.0.0"
      },
      "keywords" : [ "boilerplate", "es6", "node", "starter", "kit", "transpile", "6to5", "babel" ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "gulp",
        "test-browser" : "gulp test-browser",
        "build" : "gulp build",
        "coverage" : "gulp coverage"
      },
      "_from" : ".",
      "_npmVersion" : "2.3.0",
      "_npmUser" : {
        "name" : "thejameskyle",
        "email" : "me@thejameskyle.com"
      },
      "_id" : "pretty-format@1.2.0",
      "gitHead" : "554b33cc08b0048d41db88dc0440974afebce5fa",
      "_shasum" : "69376de6b777da76ed273f7ed5d76289f115cdb9",
      "babelBoilerplateOptions" : {
        "entryFileName" : "pretty-format",
        "exportVarName" : "PrettyFormat",
        "mochaGlobals" : [ "stub", "spy", "expect" ]
      },
      "_nodeVersion" : "0.10.36"
    }
  },
  "readme" : "# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n",
  "maintainers" : [ {
    "email" : "aaron@abramov.io",
    "name" : "aaronabramov"
  }, {
    "email" : "christoph.pojer@gmail.com",
    "name" : "cpojer"
  }, {
    "email" : "davidzilburg@gmail.com",
    "name" : "davidzilburg"
  }, {
    "email" : "opensource+npm@fb.com",
    "name" : "fb"
  }, {
    "email" : "rubennorte@gmail.com",
    "name" : "rubennorte"
  }, {
    "email" : "scott.hovestadt@gmail.com",
    "name" : "scotthovestadt"
  } ],
  "author" : {
    "name" : "James Kyle",
    "email" : "me@thejameskyle.com"
  },
  "time" : {
    "24.0.0" : "2019-01-25T15:04:58.929Z",
    "24.8.0" : "2019-05-05T02:02:21.602Z",
    "4.1.0" : "2016-09-20T11:22:51.213Z",
    "24.4.0" : "2019-03-11T14:57:49.478Z",
    "20.1.0-delta.1" : "2017-07-18T08:46:55.252Z",
    "21.3.0-beta.5" : "2017-11-02T13:17:32.386Z",
    "21.3.0-beta.6" : "2017-11-03T16:21:36.255Z",
    "20.1.0-delta.3" : "2017-07-25T22:12:26.282Z",
    "21.3.0-beta.3" : "2017-10-25T19:34:06.251Z",
    "20.1.0-delta.2" : "2017-07-19T12:56:44.830Z",
    "21.3.0-beta.4" : "2017-10-26T13:26:59.176Z",
    "20.1.0-delta.5" : "2017-08-01T16:33:37.018Z",
    "21.3.0-beta.1" : "2017-10-04T10:48:39.647Z",
    "20.1.0-delta.4" : "2017-07-27T17:19:08.800Z",
    "21.3.0-beta.2" : "2017-10-13T09:54:06.677Z",
    "3.3.2" : "2016-06-22T21:26:05.428Z",
    "24.0.0-alpha.9" : "2018-12-19T14:25:58.481Z",
    "3.7.0" : "2016-09-01T15:16:07.274Z",
    "24.0.0-alpha.7" : "2018-12-11T16:07:56.656Z",
    "24.0.0-alpha.8" : "2018-12-13T19:47:52.691Z",
    "3.3.0" : "2016-06-15T06:31:28.366Z",
    "3.3.1" : "2016-06-21T17:41:02.344Z",
    "24.0.0-alpha.1" : "2018-10-22T15:35:49.372Z",
    "2.1.0" : "2016-06-01T23:52:20.958Z",
    "24.0.0-alpha.2" : "2018-10-25T10:51:19.959Z",
    "24.0.0-alpha.0" : "2018-10-19T12:12:46.155Z",
    "24.0.0-alpha.5" : "2018-11-09T13:12:45.857Z",
    "24.0.0-alpha.6" : "2018-11-09T17:49:42.827Z",
    "21.0.0-alpha.1" : "2017-08-11T10:14:06.327Z",
    "24.0.0-alpha.4" : "2018-10-26T16:33:15.401Z",
    "23.0.0-alpha.7" : "2018-04-17T18:55:20.032Z",
    "21.0.0-alpha.2" : "2017-08-21T22:06:49.160Z",
    "23.0.0-alpha.5" : "2018-04-10T19:18:20.898Z",
    "23.0.0-alpha.4" : "2018-03-26T12:31:41.960Z",
    "21.3.0-beta.9" : "2017-11-22T13:17:33.949Z",
    "22.1.0" : "2018-01-15T11:57:17.363Z",
    "23.0.0-alpha.2" : "2018-03-26T10:40:47.317Z",
    "21.3.0-beta.7" : "2017-11-06T09:39:50.075Z",
    "21.3.0-beta.8" : "2017-11-07T17:43:44.016Z",
    "23.0.0-alpha.5r" : "2018-04-11T05:52:49.951Z",
    "24.0.0-alpha.16" : "2019-01-25T13:42:04.038Z",
    "24.0.0-alpha.15" : "2019-01-24T17:52:32.939Z",
    "24.0.0-alpha.12" : "2019-01-11T15:01:19.314Z",
    "24.0.0-alpha.13" : "2019-01-23T15:15:29.108Z",
    "4.2.0" : "2016-09-21T04:23:39.611Z",
    "20.0.2" : "2017-05-17T10:50:23.917Z",
    "24.0.0-alpha.10" : "2019-01-09T17:04:31.057Z",
    "4.2.1" : "2016-09-21T06:36:48.110Z",
    "20.0.3" : "2017-05-17T10:57:13.531Z",
    "24.0.0-alpha.11" : "2019-01-10T18:35:07.255Z",
    "24.9.0" : "2019-08-16T05:55:55.008Z",
    "4.2.2" : "2016-11-01T23:01:44.066Z",
    "20.0.0" : "2017-05-06T12:32:36.938Z",
    "4.2.3" : "2016-11-10T18:14:42.939Z",
    "20.0.1" : "2017-05-11T10:50:08.654Z",
    "24.5.0" : "2019-03-12T16:36:27.199Z",
    "3.0.0" : "2016-06-13T20:33:54.044Z",
    "3.4.1" : "2016-07-04T17:49:21.976Z",
    "3.4.2" : "2016-07-06T01:44:16.253Z",
    "3.4.3" : "2016-07-06T06:28:01.288Z",
    "3.8.0" : "2016-09-11T01:43:26.665Z",
    "19.1.0-alpha.eed82034" : "2017-03-17T00:41:24.175Z",
    "21.2.1" : "2017-09-27T22:15:03.745Z",
    "3.4.0" : "2016-07-02T20:42:16.060Z",
    "21.2.0" : "2017-09-26T20:22:19.365Z",
    "22.4.0" : "2018-02-20T12:03:31.362Z",
    "22.0.5" : "2018-01-09T15:09:54.203Z",
    "22.0.6" : "2018-01-11T09:46:46.730Z",
    "18.0.0" : "2016-12-15T11:24:39.904Z",
    "22.4.3" : "2018-03-21T16:08:10.760Z",
    "23.0.0-beta.2" : "2018-04-26T21:17:37.807Z",
    "22.0.0" : "2017-12-18T11:03:25.836Z",
    "22.0.1" : "2017-12-18T20:29:25.187Z",
    "22.0.2" : "2017-12-19T13:53:04.651Z",
    "23.0.0-beta.1" : "2018-04-21T15:44:24.721Z",
    "22.0.3" : "2017-12-19T14:58:56.170Z",
    "23.0.0-beta.0" : "2018-04-20T10:10:47.213Z",
    "23.2.0" : "2018-06-25T14:05:16.960Z",
    "23.0.0-alpha.3r" : "2018-04-30T13:10:13.056Z",
    "1.0.0" : "2015-03-08T04:52:08.223Z",
    "23.6.0" : "2018-09-10T12:42:53.440Z",
    "23.0.0-charlie.2" : "2018-05-15T09:51:27.346Z",
    "23.0.0-charlie.3" : "2018-05-22T14:59:01.270Z",
    "23.0.0-charlie.0" : "2018-05-02T10:56:23.810Z",
    "23.0.0-charlie.1" : "2018-05-03T12:10:15.961Z",
    "24.6.0" : "2019-04-01T22:26:22.948Z",
    "4.3.0" : "2016-11-18T07:08:21.917Z",
    "4.3.1" : "2016-11-18T14:39:30.721Z",
    "21.0.0-beta.1" : "2017-08-24T21:26:51.250Z",
    "21.3.0-beta.12" : "2017-12-05T18:48:35.102Z",
    "21.3.0-beta.13" : "2017-12-06T14:37:08.966Z",
    "21.3.0-beta.14" : "2017-12-12T10:52:36.520Z",
    "21.3.0-beta.15" : "2017-12-15T13:27:40.801Z",
    "25.0.0" : "2019-08-22T03:24:00.871Z",
    "3.5.0" : "2016-07-08T08:29:23.317Z",
    "modified" : "2020-01-22T01:00:00.335Z",
    "3.5.1" : "2016-08-01T17:06:25.371Z",
    "3.5.2" : "2016-08-04T02:53:37.087Z",
    "3.5.3" : "2016-08-11T00:23:51.193Z",
    "3.1.0" : "2016-06-14T04:31:59.244Z",
    "21.1.0" : "2017-09-14T01:50:14.649Z",
    "21.3.0-beta.10" : "2017-11-25T12:39:25.671Z",
    "23.0.0-charlie.4" : "2018-05-23T10:42:26.200Z",
    "21.3.0-beta.11" : "2017-11-29T14:31:21.873Z",
    "24.2.0-alpha.0" : "2019-03-05T14:46:42.860Z",
    "21.3.0-alpha.eff7a1cf" : "2017-10-01T16:46:50.733Z",
    "18.1.0" : "2016-12-29T01:47:37.936Z",
    "19.3.0-alpha.85402254" : "2017-05-05T11:48:22.883Z",
    "created" : "2015-03-08T04:52:08.223Z",
    "19.2.0-alpha.993e64af" : "2017-05-04T15:37:41.927Z",
    "20.1.0-echo.1" : "2017-08-08T16:49:56.294Z",
    "23.0.0-beta.3r" : "2018-04-30T13:14:55.844Z",
    "20.1.0-beta.1" : "2017-07-13T10:33:43.286Z",
    "23.5.0" : "2018-08-10T13:51:42.861Z",
    "1.1.0" : "2015-03-15T23:34:23.843Z",
    "1.1.1" : "2015-03-16T17:00:42.800Z",
    "20.1.0-alpha.1" : "2017-06-28T10:16:21.675Z",
    "21.3.0-alpha.1e3ee68e" : "2017-09-28T14:20:41.836Z",
    "24.7.0" : "2019-04-03T03:55:18.087Z",
    "4.0.0" : "2016-09-11T02:02:31.572Z",
    "20.1.0-alpha.3" : "2017-06-30T14:20:54.944Z",
    "20.1.0-alpha.2" : "2017-06-29T16:36:48.331Z",
    "24.3.0" : "2019-03-07T12:59:39.649Z",
    "24.3.1" : "2019-03-07T23:12:20.542Z",
    "23.0.0-alpha.6r" : "2018-04-12T07:01:35.462Z",
    "3.6.0" : "2016-08-17T20:20:08.951Z",
    "21.0.0" : "2017-09-04T15:01:55.963Z",
    "25.1.0" : "2020-01-22T00:59:53.413Z",
    "3.2.0" : "2016-06-15T03:23:45.115Z",
    "21.0.2" : "2017-09-08T14:19:28.371Z",
    "2.0.0" : "2016-06-01T22:02:28.012Z",
    "18.5.0-alpha.7da3df39" : "2017-02-17T16:57:58.225Z",
    "23.0.1" : "2018-05-27T15:30:57.217Z",
    "20.1.0-chi.1" : "2017-07-14T10:25:05.727Z",
    "23.0.0" : "2018-05-24T17:26:26.517Z",
    "19.0.0" : "2017-02-21T09:30:33.083Z",
    "1.2.0" : "2015-03-16T17:39:03.466Z"
  },
  "repository" : {
    "type" : "git",
    "url" : "git+https://github.com/facebook/jest.git",
    "directory" : "packages/pretty-format"
  },
  "users" : {
    "program247365" : true,
    "vaju" : true,
    "tribou" : true,
    "alexxnica" : true,
    "chocolateboy" : true,
    "willwolffmyren" : true,
    "capaj" : true,
    "robmcguinness" : true,
    "samhagman" : true,
    "styfle" : true,
    "ryanlittle" : true
  },
  "readmeFilename" : "README.md",
  "homepage" : "https://github.com/facebook/jest#readme",
  "bugs" : {
    "url" : "https://github.com/facebook/jest/issues"
  },
  "license" : "MIT"
}