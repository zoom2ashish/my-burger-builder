{
  "_id" : "html-escaper",
  "_rev" : "4-5b073be6f8b9380f7ab8ff8889ac2e09",
  "name" : "html-escaper",
  "description" : "fast and safe way to escape and unescape &<>'\" chars",
  "dist-tags" : {
    "latest" : "2.0.0"
  },
  "versions" : {
    "2.0.0" : {
      "name" : "html-escaper",
      "description" : "fast and safe way to escape and unescape &<>'\" chars",
      "version" : "2.0.0",
      "author" : {
        "name" : "Andrea Giammarchi"
      },
      "homepage" : "https://github.com/WebReflection/html-escaper",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/WebReflection/html-escaper.git"
      },
      "bugs" : {
        "url" : "https://github.com/WebReflection/html-escaper/issues"
      },
      "main" : "cjs/index.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/html-escaper/-/html-escaper-2.0.0.tgz",
        "shasum" : "71e87f931de3fe09e56661ab9a29aadec707b491"
      },
      "devDependencies" : {
        "ascjs" : "^3.0.1",
        "coveralls" : "^3.0.5",
        "istanbul" : "^0.4.5",
        "rollup" : "^1.17.0",
        "uglify-js" : "^3.6.0"
      },
      "keywords" : [ "html", "escape", "encode", "unescape", "decode", "entities" ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "webreflection",
        "email" : "andrea.giammarchi@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run cjs && npm run rollup && npm run minify && npm test && npm run size",
        "cjs" : "ascjs esm cjs",
        "coveralls" : "cat ./coverage/lcov.info | coveralls",
        "minify" : "uglifyjs index.js --comments=/^!/ --compress --mangle -o min.js",
        "rollup" : "rollup --config rollup.config.js",
        "size" : "cat index.js | wc -c;cat min.js | wc -c;gzip -c min.js | wc -c",
        "test" : "istanbul cover ./test.js"
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "webreflection",
        "email" : "andrea.giammarchi@gmail.com"
      },
      "_id" : "html-escaper@2.0.0",
      "gitHead" : "a9afff9a565b708b884b41b22db89e2367194e4a",
      "module" : "esm/index.js",
      "unpkg" : "min.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/html-escaper_2.0.0_1564090220918_0.06255172556387478"
      },
      "_nodeVersion" : "11.15.0"
    },
    "1.0.0" : {
      "name" : "html-escaper",
      "description" : "fast and safe way to escape and unescape &<>'\" chars",
      "version" : "1.0.0",
      "author" : {
        "name" : "Andrea Giammarchi"
      },
      "homepage" : "https://github.com/WebReflection/html-escaper",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/WebReflection/html-escaper.git"
      },
      "bugs" : {
        "url" : "https://github.com/WebReflection/html-escaper/issues"
      },
      "main" : "html.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/html-escaper/-/html-escaper-1.0.0.tgz",
        "shasum" : "8c9b5cb10348b8933ea9d1dceb6d574ba24b95f8"
      },
      "keywords" : [ "html", "escape", "encode", "unescape", "decode", "entities" ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "webreflection",
        "email" : "andrea.giammarchi@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test" : "node ./test.js"
      },
      "_from" : ".",
      "_npmVersion" : "2.6.0",
      "_npmUser" : {
        "name" : "webreflection",
        "email" : "andrea.giammarchi@gmail.com"
      },
      "_id" : "html-escaper@1.0.0",
      "gitHead" : "980c4ed627135dc317c9941c19f78b80f9ce6311",
      "_shasum" : "8c9b5cb10348b8933ea9d1dceb6d574ba24b95f8",
      "_nodeVersion" : "1.4.1"
    },
    "1.0.1" : {
      "name" : "html-escaper",
      "description" : "fast and safe way to escape and unescape &<>'\" chars",
      "version" : "1.0.1",
      "author" : {
        "name" : "Andrea Giammarchi"
      },
      "homepage" : "https://github.com/WebReflection/html-escaper",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/WebReflection/html-escaper.git"
      },
      "bugs" : {
        "url" : "https://github.com/WebReflection/html-escaper/issues"
      },
      "main" : "html.js",
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/html-escaper/-/html-escaper-1.0.1.tgz",
        "shasum" : "ee029e2862674017941355a7f61fc2c7c0a6fd72"
      },
      "devDependencies" : {
        "coveralls" : "^2.13.1",
        "istanbul" : "^0.4.5",
        "uglify-js" : "^3.0.15"
      },
      "keywords" : [ "html", "escape", "encode", "unescape", "decode", "entities" ],
      "license" : "MIT",
      "maintainers" : [ {
        "name" : "webreflection",
        "email" : "andrea.giammarchi@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run minify && npm test && npm run size",
        "coveralls" : "cat ./coverage/lcov.info | coveralls",
        "minify" : "uglifyjs html.js --comments=/^!/ --compress --mangle -o min.js",
        "size" : "cat html.js | wc -c;cat min.js | wc -c;gzip -c min.js | wc -c",
        "test" : "istanbul cover ./test.js"
      },
      "_from" : ".",
      "_npmVersion" : "4.6.1",
      "_npmUser" : {
        "name" : "webreflection",
        "email" : "andrea.giammarchi@gmail.com"
      },
      "_id" : "html-escaper@1.0.1",
      "gitHead" : "11700cce7a4e9e087b0a74fece96348bda9df316",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/html-escaper-1.0.1.tgz_1496780327260_0.589023131178692"
      },
      "_shasum" : "ee029e2862674017941355a7f61fc2c7c0a6fd72",
      "_nodeVersion" : "7.10.0"
    }
  },
  "readme" : "# html-escaper [![Build Status](https://travis-ci.org/WebReflection/html-escaper.svg?branch=master)](https://travis-ci.org/WebReflection/html-escaper) [![Coverage Status](https://coveralls.io/repos/github/WebReflection/html-escaper/badge.svg?branch=master)](https://coveralls.io/github/WebReflection/html-escaper?branch=master)\nA simple module to escape/unescape common problematic entities.\n\n\n### How\nThis package is available in npm so `npm install html-escaper` is all you need to do, using eventually the global flag too.\n\nOnce the module is present\n```js\nvar html = require('html-escaper');\n\n// two basic methods\nhtml.escape('string');\nhtml.unescape('escaped string');\n```\n\n\n### Why\nthere is basically one rule only: do not **ever** replace one char after another if you are transforming a string into another.\n\n```js\n// WARNING: THIS IS WRONG\n// if you are that kind of dev that does this\nfunction escape(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/</g, \"&lt;\")\n          .replace(/>/g, \"&gt;\")\n          .replace(/'/g, \"&#39;\")\n          .replace(/\"/g, \"&quot;\");\n}\n\n// you might be the same dev that does this too\nfunction unescape(s) {\n  return s.replace(/&amp;/g, \"&\")\n          .replace(/&lt;/g, \"<\")\n          .replace(/&gt;/g, \">\")\n          .replace(/&#39;/g, \"'\")\n          .replace(/&quot;/g, '\"');\n}\n\n// guess what we have here ?\nunescape('&amp;lt;');\n\n// now guess this XSS too ...\nunescape('&amp;lt;script&amp;gt;alert(\"yo\")&amp;lt;/script&amp;gt;');\n\n\n```\n\nThe last example will produce `<script>alert(\"yo\")</script>` instead of the expected `&lt;script&gt;alert(\"yo\")&lt;/script&gt;`.\n\nNothing like this could possibly happen if we grab all chars at once and either ways.\nIt's just a fortunate case that after swapping `&` with `&amp;` no other replace will be affected, but it's not portable and universally a bad practice.\n\nGrab all chars at once, no excuses!\n\n\n\n**more details**\nAs somebody might think it's an `unescape` issue only, it's not. Being an anti-pattern with side effects works both ways.\n\nAs example, changing the order of the replacement in escaping would produce the unexpected:\n```js\nfunction escape(s) {\n  return s.replace(/</g, \"&lt;\")\n          .replace(/>/g, \"&gt;\")\n          .replace(/'/g, \"&#39;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/&/g, \"&amp;\");\n}\n\nescape('<'); // &amp;lt; instead of &lt;\n```\nIf we do not want to code with the fear that the order wasn't perfect or that our order in either escaping or unescaping is different from the order another method or function used, if we understand the issue and we agree it's potentially a disaster prone approach, if we add the fact in this case creating 4 RegExp objects each time and invoking 4 times `.replace` trough the `String.prototype` is also potentially slower than creating one function only holding one object, or holding the function too, we should agree there is not absolutely any valid reason to keep proposing a char-by-char implementation.\n\nWe have proofs this approach can fail already so ... why should we risk? Just avoid and grab all chars at once or simply use this tiny utility.\n\n### Backtick\nInternt explorer < 9 has [some backtick issue](https://html5sec.org/#102)\n\nFor compatibility sake with common server-side HTML entities encoders and decoders, and in order to have the most reliable I/O, this little utility will NOT fix this IE < 9 problem.\n\nIt is also important to note that if we create valid HTML and we set attributes at runtime through this utility, backticks in strings cannot possibly affect attribute behaviors.\n\n```js\nvar img = new Image();\nimg.src = html.escape(\n  'x` `<script>alert(1)</script>\"` `'\n);\n// it won't cause problems even in IE < 9\n```\n\n**However**, if you use `innerHTML` and you target IE < 9 then [this **might** be a problem](https://github.com/nette/nette/issues/1496).\n\nAccordingly, if you need more chars and/or backticks to be escaped and unescaped, feel free to use alternatives like [lodash](https://github.com/lodash/lodash) or [he](https://www.npmjs.com/package/he)\n\nHere a bit more of [my POV](https://github.com/WebReflection/html-escaper/commit/52d554fc6e8583b6ffdd357967cf71962fc07cf6#commitcomment-10625122) and why I haven't implemented same thing alternatives did. Good news: those are alternatives ;-)",
  "maintainers" : [ {
    "name" : "webreflection",
    "email" : "andrea.giammarchi@gmail.com"
  } ],
  "author" : {
    "name" : "Andrea Giammarchi"
  },
  "time" : {
    "2.0.0" : "2019-07-25T21:30:21.044Z",
    "created" : "2015-04-08T09:55:12.173Z",
    "modified" : "2019-07-25T21:30:25.189Z",
    "1.0.0" : "2015-04-08T09:55:12.173Z",
    "1.0.1" : "2017-06-06T20:18:48.324Z"
  },
  "repository" : {
    "type" : "git",
    "url" : "git+https://github.com/WebReflection/html-escaper.git"
  },
  "users" : {
    "webreflection" : true
  },
  "readmeFilename" : "README.md",
  "homepage" : "https://github.com/WebReflection/html-escaper",
  "keywords" : [ "html", "escape", "encode", "unescape", "decode", "entities" ],
  "bugs" : {
    "url" : "https://github.com/WebReflection/html-escaper/issues"
  },
  "license" : "MIT"
}