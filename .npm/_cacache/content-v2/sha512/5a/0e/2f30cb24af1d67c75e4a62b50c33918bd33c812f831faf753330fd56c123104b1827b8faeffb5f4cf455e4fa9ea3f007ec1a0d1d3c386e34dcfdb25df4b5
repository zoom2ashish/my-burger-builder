{
  "_id" : "type",
  "_rev" : "14-8bf3a6c25057f50031936246a96fe0b6",
  "name" : "type",
  "description" : "Runtime validation and processing of JavaScript types",
  "dist-tags" : {
    "latest" : "2.0.0"
  },
  "versions" : {
    "1.0.3" : {
      "name" : "type",
      "description" : "Runtime validation and processing of JavaScript types",
      "version" : "1.0.3",
      "author" : {
        "name" : "Mariusz Nowak",
        "email" : "medyk@medikoo.com",
        "url" : "https://www.medikoo.com/"
      },
      "homepage" : "https://github.com/medikoo/type#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/medikoo/type.git"
      },
      "bugs" : {
        "url" : "https://github.com/medikoo/type/issues"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-1.0.3.tgz",
        "shasum" : "16f5d39f27a2d28d86e48f8981859e9d3296c179"
      },
      "devDependencies" : {
        "chai" : "^4.2.0",
        "eslint" : "^6.1.0",
        "eslint-config-medikoo" : "^2.5.0",
        "git-list-updated" : "^1.2.1",
        "husky" : "^3.0.2",
        "lint-staged" : "^9.2.1",
        "mocha" : "^6.2.0",
        "nyc" : "^14.1.1",
        "prettier-elastic" : "^1.18.2"
      },
      "keywords" : [ "type", "coercion" ],
      "license" : "ISC",
      "maintainers" : [ {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "coverage" : "nyc --reporter=lcov --reporter=html --reporter=text-summary npm test",
        "check-coverage" : "npm run coverage && nyc check-coverage --statements 80 --function 80 --branches 80 --lines 80",
        "lint" : "eslint --ignore-path=.gitignore .",
        "lint-updated" : "pipe-git-updated --ext=js -- eslint --ignore-pattern '!*'",
        "prettier-check-updated" : "pipe-git-updated --ext=css --ext=html --ext=js --ext=json --ext=md --ext=yaml --ext=yml -- prettier -c",
        "prettify" : "prettier --write --ignore-path .gitignore '**/*.{css,html,js,json,md,yaml,yml}'",
        "test" : "mocha --recursive"
      },
      "_npmVersion" : "6.9.0",
      "_npmUser" : {
        "name" : "medikoo",
        "email" : "medikoo+npm@medikoo.com"
      },
      "_id" : "type@1.0.3",
      "lint-staged" : {
        "*.js" : [ "eslint" ],
        "*.{css,html,js,json,md,yaml,yml}" : [ "prettier -c" ]
      },
      "gitHead" : "2d807119cad3861d4ad11b2fe184592dcad121c7",
      "husky" : {
        "hooks" : {
          "pre-commit" : "lint-staged"
        }
      },
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/type_1.0.3_1565090948273_0.19859132289824077"
      },
      "eslintConfig" : {
        "extends" : "medikoo/es3",
        "root" : true,
        "globals" : {
          "Map" : true,
          "Promise" : true,
          "Set" : true,
          "Symbol" : true
        },
        "overrides" : [ {
          "files" : "test/**/*.js",
          "env" : {
            "mocha" : true
          },
          "rules" : {
            "no-eval" : "off",
            "no-new-wrappers" : "off"
          }
        }, {
          "files" : [ "string/coerce.js", "number/coerce.js" ],
          "rules" : {
            "no-implicit-coercion" : "off"
          }
        }, {
          "files" : "plain-object/is.js",
          "rules" : {
            "no-proto" : "off"
          }
        } ]
      },
      "prettier" : {
        "printWidth" : 100,
        "tabWidth" : 4,
        "overrides" : [ {
          "files" : [ "*.md" ],
          "options" : {
            "tabWidth" : 2
          }
        } ]
      },
      "_nodeVersion" : "12.6.0"
    },
    "2.0.0" : {
      "name" : "type",
      "description" : "Runtime validation and processing of JavaScript types",
      "version" : "2.0.0",
      "author" : {
        "name" : "Mariusz Nowak",
        "email" : "medyk@medikoo.com",
        "url" : "https://www.medikoo.com/"
      },
      "homepage" : "https://github.com/medikoo/type#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/medikoo/type.git"
      },
      "bugs" : {
        "url" : "https://github.com/medikoo/type/issues"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-2.0.0.tgz",
        "shasum" : "5f16ff6ef2eb44f260494dae271033b29c09a9c3"
      },
      "devDependencies" : {
        "chai" : "^4.2.0",
        "eslint" : "^6.4.0",
        "eslint-config-medikoo" : "^2.5.1",
        "git-list-updated" : "^1.2.1",
        "husky" : "^3.0.5",
        "lint-staged" : "^9.2.5",
        "mocha" : "^6.2.0",
        "nyc" : "^14.1.1",
        "prettier-elastic" : "^1.18.2"
      },
      "keywords" : [ "type", "coercion" ],
      "license" : "ISC",
      "maintainers" : [ {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "coverage" : "nyc --reporter=lcov --reporter=html --reporter=text-summary npm test",
        "check-coverage" : "npm run coverage && nyc check-coverage --statements 80 --function 80 --branches 80 --lines 80",
        "lint" : "eslint --ignore-path=.gitignore .",
        "lint-updated" : "pipe-git-updated --ext=js -- eslint --ignore-pattern '!*'",
        "prettier-check-updated" : "pipe-git-updated --ext=css --ext=html --ext=js --ext=json --ext=md --ext=yaml --ext=yml -- prettier -c",
        "prettify" : "prettier --write --ignore-path .gitignore '**/*.{css,html,js,json,md,yaml,yml}'",
        "test" : "mocha --recursive"
      },
      "_npmVersion" : "6.11.3",
      "_npmUser" : {
        "name" : "medikoo",
        "email" : "medikoo+npm@medikoo.com"
      },
      "_id" : "type@2.0.0",
      "lint-staged" : {
        "*.js" : [ "eslint" ],
        "*.{css,html,js,json,md,yaml,yml}" : [ "prettier -c" ]
      },
      "gitHead" : "8912d712e6225cff8b4fd94f984d9afd9b76cee1",
      "husky" : {
        "hooks" : {
          "pre-commit" : "lint-staged"
        }
      },
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/type_2.0.0_1570722758364_0.7727727991439377"
      },
      "eslintConfig" : {
        "extends" : "medikoo/es3",
        "root" : true,
        "globals" : {
          "Map" : true,
          "Promise" : true,
          "Set" : true,
          "Symbol" : true
        },
        "overrides" : [ {
          "files" : "test/**/*.js",
          "env" : {
            "mocha" : true
          },
          "rules" : {
            "no-eval" : "off",
            "no-new-wrappers" : "off"
          }
        }, {
          "files" : [ "string/coerce.js", "number/coerce.js" ],
          "rules" : {
            "no-implicit-coercion" : "off"
          }
        }, {
          "files" : "plain-object/is.js",
          "rules" : {
            "no-proto" : "off"
          }
        } ]
      },
      "prettier" : {
        "printWidth" : 100,
        "tabWidth" : 4,
        "overrides" : [ {
          "files" : [ "*.md" ],
          "options" : {
            "tabWidth" : 2
          }
        } ]
      },
      "_nodeVersion" : "12.11.1"
    },
    "0.0.2" : {
      "name" : "type",
      "description" : "Type utils",
      "version" : "0.0.2",
      "author" : {
        "name" : "Irakli Gozalishvili",
        "email" : "rfobic@gmail.com",
        "url" : "http://jeditoolkit.com"
      },
      "homepage" : "https://github.com/Gozala/type",
      "repository" : {
        "type" : "git",
        "url" : "git://github.com/Gozala/type.git",
        "web" : "https://github.com/Gozala/type"
      },
      "bugs" : {
        "url" : "http://github.com/Gozala/type/issues/"
      },
      "engines" : {
        "node" : "*"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-0.0.2.tgz",
        "shasum" : "4726bad976d955b6fc4862238451d82a0648705e"
      },
      "dependencies" : {
      },
      "devDependencies" : {
        "test" : ">=0.4.0"
      },
      "keywords" : [ "types", "utils", "checks" ],
      "licenses" : [ {
        "type" : "MIT",
        "url" : "http://jeditoolkit.com/LICENSE"
      } ],
      "maintainers" : [ {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      } ],
      "directories" : {
        "lib" : "."
      },
      "scripts" : {
        "test" : "node tests/test-type.js"
      },
      "_npmVersion" : "1.0.101",
      "_npmUser" : {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      },
      "_id" : "type@0.0.2",
      "_engineSupported" : true,
      "_defaultsLoaded" : true,
      "id" : "type",
      "_nodeVersion" : "v0.5.9"
    },
    "0.0.3" : {
      "name" : "type",
      "description" : "Type utils",
      "version" : "0.0.3",
      "author" : {
        "name" : "Irakli Gozalishvili",
        "email" : "rfobic@gmail.com",
        "url" : "http://jeditoolkit.com"
      },
      "homepage" : "https://github.com/Gozala/type",
      "repository" : {
        "type" : "git",
        "url" : "git://github.com/Gozala/type.git",
        "web" : "https://github.com/Gozala/type"
      },
      "bugs" : {
        "url" : "http://github.com/Gozala/type/issues/"
      },
      "engines" : {
        "node" : "*"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-0.0.3.tgz",
        "shasum" : "0eacb2438a9935614d9f351bd91250890ce4d533"
      },
      "dependencies" : {
      },
      "optionalDependencies" : {
      },
      "devDependencies" : {
        "test" : ">=0.4.0"
      },
      "keywords" : [ "types", "utils", "checks" ],
      "licenses" : [ {
        "type" : "MIT",
        "url" : "http://jeditoolkit.com/LICENSE"
      } ],
      "maintainers" : [ {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      } ],
      "directories" : {
        "lib" : "."
      },
      "scripts" : {
        "test" : "node tests/test-type.js"
      },
      "_npmVersion" : "1.1.12",
      "_npmUser" : {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      },
      "_id" : "type@0.0.3",
      "_engineSupported" : true,
      "_defaultsLoaded" : true,
      "id" : "type",
      "readme" : "# type #\n\nType utils\n\n## Install ##\n\n    npm install type\n\n## Require ##\n\n    var checks = require('https!raw.github.com/Gozala/type/v0.0.1/checks.js')\n",
      "_nodeVersion" : "v0.6.14"
    },
    "1.0.0" : {
      "name" : "type",
      "description" : "Runtime validation and processing of JavaScript types",
      "version" : "1.0.0",
      "author" : {
        "name" : "Mariusz Nowak",
        "email" : "medyk@medikoo.com",
        "url" : "https://www.medikoo.com/"
      },
      "homepage" : "https://github.com/medikoo/type#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/medikoo/type.git"
      },
      "bugs" : {
        "url" : "https://github.com/medikoo/type/issues"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-1.0.0.tgz",
        "shasum" : "36799d75457d1dc9f528730396c0ab247264e950"
      },
      "devDependencies" : {
        "chai" : "^4.2.0",
        "eslint" : "^5.15.3",
        "eslint-config-medikoo-es3" : "^2.1.0",
        "git-list-updated" : "^1.1.2",
        "husky" : "^1.3.1",
        "lint-staged" : "^8.1.5",
        "mocha" : "^6.0.2",
        "nyc" : "^13.3.0",
        "prettier-elastic" : "^1.16.4"
      },
      "keywords" : [ "type", "coercion" ],
      "license" : "ISC",
      "maintainers" : [ {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "coverage" : "nyc --reporter=lcov --reporter=html --reporter=text-summary npm test",
        "check-coverage" : "npm run coverage && nyc check-coverage --statements 80 --function 80 --branches 80 --lines 80",
        "lint" : "eslint --ignore-path=.gitignore .",
        "lint-updated" : "pipe-git-updated --ext=js -- eslint --ignore-pattern '!*'",
        "prettier-check-updated" : "pipe-git-updated --ext=css --ext=html --ext=js --ext=json --ext=md --ext=yaml --ext=yml -- prettier -c",
        "prettify" : "prettier --write --ignore-path .gitignore '**/*.{css,html,js,json,md,yaml,yml}'",
        "test" : "mocha --recursive"
      },
      "_npmVersion" : "6.7.0",
      "_npmUser" : {
        "name" : "medikoo",
        "email" : "medikoo+npm@medikoo.com"
      },
      "_id" : "type@1.0.0",
      "lint-staged" : {
        "*.js" : [ "eslint" ],
        "*.{css,html,js,json,md,yaml,yml}" : [ "prettier -c" ]
      },
      "gitHead" : "83b5ba1c42bd92c431fdcc4ca65fe64d0687b1b9",
      "husky" : {
        "hooks" : {
          "pre-commit" : "lint-staged"
        }
      },
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/type_1.0.0_1554455336096_0.38991648377472776"
      },
      "eslintConfig" : {
        "extends" : "medikoo-es3",
        "root" : true,
        "globals" : {
          "Map" : true,
          "Promise" : true,
          "Set" : true,
          "Symbol" : true
        },
        "overrides" : [ {
          "files" : "test/**/*.js",
          "env" : {
            "mocha" : true
          },
          "rules" : {
            "no-eval" : "off",
            "no-new-wrappers" : "off"
          }
        }, {
          "files" : [ "string/coerce.js", "number/coerce.js" ],
          "rules" : {
            "no-implicit-coercion" : "off"
          }
        }, {
          "files" : "plain-object/is.js",
          "rules" : {
            "no-proto" : "off"
          }
        } ]
      },
      "_nodeVersion" : "11.13.0"
    },
    "1.0.1" : {
      "name" : "type",
      "description" : "Runtime validation and processing of JavaScript types",
      "version" : "1.0.1",
      "author" : {
        "name" : "Mariusz Nowak",
        "email" : "medyk@medikoo.com",
        "url" : "https://www.medikoo.com/"
      },
      "homepage" : "https://github.com/medikoo/type#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/medikoo/type.git"
      },
      "bugs" : {
        "url" : "https://github.com/medikoo/type/issues"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-1.0.1.tgz",
        "shasum" : "084c9a17fcc9151a2cdb1459905c2e45e4bb7d61"
      },
      "devDependencies" : {
        "chai" : "^4.2.0",
        "eslint" : "^5.15.3",
        "eslint-config-medikoo-es3" : "^2.1.0",
        "git-list-updated" : "^1.1.2",
        "husky" : "^1.3.1",
        "lint-staged" : "^8.1.5",
        "mocha" : "^6.0.2",
        "nyc" : "^13.3.0",
        "prettier-elastic" : "^1.16.4"
      },
      "keywords" : [ "type", "coercion" ],
      "license" : "ISC",
      "maintainers" : [ {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "coverage" : "nyc --reporter=lcov --reporter=html --reporter=text-summary npm test",
        "check-coverage" : "npm run coverage && nyc check-coverage --statements 80 --function 80 --branches 80 --lines 80",
        "lint" : "eslint --ignore-path=.gitignore .",
        "lint-updated" : "pipe-git-updated --ext=js -- eslint --ignore-pattern '!*'",
        "prettier-check-updated" : "pipe-git-updated --ext=css --ext=html --ext=js --ext=json --ext=md --ext=yaml --ext=yml -- prettier -c",
        "prettify" : "prettier --write --ignore-path .gitignore '**/*.{css,html,js,json,md,yaml,yml}'",
        "test" : "mocha --recursive"
      },
      "_npmVersion" : "6.7.0",
      "_npmUser" : {
        "name" : "medikoo",
        "email" : "medikoo+npm@medikoo.com"
      },
      "_id" : "type@1.0.1",
      "lint-staged" : {
        "*.js" : [ "eslint" ],
        "*.{css,html,js,json,md,yaml,yml}" : [ "prettier -c" ]
      },
      "gitHead" : "eb9e77ae26450e8d250db7f1f1b5e01f13011750",
      "husky" : {
        "hooks" : {
          "pre-commit" : "lint-staged"
        }
      },
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/type_1.0.1_1554733326657_0.6015133915569804"
      },
      "eslintConfig" : {
        "extends" : "medikoo-es3",
        "root" : true,
        "globals" : {
          "Map" : true,
          "Promise" : true,
          "Set" : true,
          "Symbol" : true
        },
        "overrides" : [ {
          "files" : "test/**/*.js",
          "env" : {
            "mocha" : true
          },
          "rules" : {
            "no-eval" : "off",
            "no-new-wrappers" : "off"
          }
        }, {
          "files" : [ "string/coerce.js", "number/coerce.js" ],
          "rules" : {
            "no-implicit-coercion" : "off"
          }
        }, {
          "files" : "plain-object/is.js",
          "rules" : {
            "no-proto" : "off"
          }
        } ]
      },
      "_nodeVersion" : "11.13.0"
    },
    "1.1.0" : {
      "name" : "type",
      "description" : "Runtime validation and processing of JavaScript types",
      "version" : "1.1.0",
      "author" : {
        "name" : "Mariusz Nowak",
        "email" : "medyk@medikoo.com",
        "url" : "https://www.medikoo.com/"
      },
      "homepage" : "https://github.com/medikoo/type#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/medikoo/type.git"
      },
      "bugs" : {
        "url" : "https://github.com/medikoo/type/issues"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-1.1.0.tgz",
        "shasum" : "a795fcf14c01b2ef73ccf106d34f3a4d590a1bcb"
      },
      "devDependencies" : {
        "chai" : "^4.2.0",
        "eslint" : "^6.4.0",
        "eslint-config-medikoo" : "^2.5.1",
        "git-list-updated" : "^1.2.1",
        "husky" : "^3.0.5",
        "lint-staged" : "^9.2.5",
        "mocha" : "^6.2.0",
        "nyc" : "^14.1.1",
        "prettier-elastic" : "^1.18.2"
      },
      "keywords" : [ "type", "coercion" ],
      "license" : "ISC",
      "maintainers" : [ {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "coverage" : "nyc --reporter=lcov --reporter=html --reporter=text-summary npm test",
        "check-coverage" : "npm run coverage && nyc check-coverage --statements 80 --function 80 --branches 80 --lines 80",
        "lint" : "eslint --ignore-path=.gitignore .",
        "lint-updated" : "pipe-git-updated --ext=js -- eslint --ignore-pattern '!*'",
        "prettier-check-updated" : "pipe-git-updated --ext=css --ext=html --ext=js --ext=json --ext=md --ext=yaml --ext=yml -- prettier -c",
        "prettify" : "prettier --write --ignore-path .gitignore '**/*.{css,html,js,json,md,yaml,yml}'",
        "test" : "mocha --recursive"
      },
      "_npmVersion" : "6.10.3",
      "_npmUser" : {
        "name" : "medikoo",
        "email" : "medikoo+npm@medikoo.com"
      },
      "_id" : "type@1.1.0",
      "lint-staged" : {
        "*.js" : [ "eslint" ],
        "*.{css,html,js,json,md,yaml,yml}" : [ "prettier -c" ]
      },
      "gitHead" : "96e12224d737814f66b2314b985f392c5c56e3b9",
      "husky" : {
        "hooks" : {
          "pre-commit" : "lint-staged"
        }
      },
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/type_1.1.0_1568977476690_0.6923908247199781"
      },
      "eslintConfig" : {
        "extends" : "medikoo/es3",
        "root" : true,
        "globals" : {
          "Map" : true,
          "Promise" : true,
          "Set" : true,
          "Symbol" : true
        },
        "overrides" : [ {
          "files" : "test/**/*.js",
          "env" : {
            "mocha" : true
          },
          "rules" : {
            "no-eval" : "off",
            "no-new-wrappers" : "off"
          }
        }, {
          "files" : [ "string/coerce.js", "number/coerce.js" ],
          "rules" : {
            "no-implicit-coercion" : "off"
          }
        }, {
          "files" : "plain-object/is.js",
          "rules" : {
            "no-proto" : "off"
          }
        } ]
      },
      "prettier" : {
        "printWidth" : 100,
        "tabWidth" : 4,
        "overrides" : [ {
          "files" : [ "*.md" ],
          "options" : {
            "tabWidth" : 2
          }
        } ]
      },
      "_nodeVersion" : "12.10.0"
    },
    "0.0.1" : {
      "name" : "type",
      "description" : "Type utils",
      "version" : "0.0.1",
      "author" : {
        "name" : "Irakli Gozalishvili",
        "email" : "rfobic@gmail.com",
        "url" : "http://jeditoolkit.com"
      },
      "homepage" : "https://github.com/Gozala/type",
      "repository" : {
        "type" : "git",
        "url" : "git://github.com/Gozala/type.git",
        "web" : "https://github.com/Gozala/type"
      },
      "bugs" : {
        "url" : "http://github.com/Gozala/type/issues/"
      },
      "engines" : {
        "node" : "0.4.x"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-0.0.1.tgz",
        "shasum" : "b0204ee776b790769f307af8fbf513308a41433c"
      },
      "dependencies" : {
      },
      "devDependencies" : {
        "test" : ">=0.0.10"
      },
      "keywords" : [ "types", "utils", "checks" ],
      "licenses" : [ {
        "type" : "MIT",
        "url" : "http://jeditoolkit.com/LICENSE"
      } ],
      "directories" : {
        "lib" : "."
      },
      "scripts" : {
        "test" : "node tests/test-type.js"
      },
      "_npmVersion" : "1.0.8",
      "_id" : "type@0.0.1",
      "_engineSupported" : true,
      "_defaultsLoaded" : true,
      "id" : "type",
      "_nodeVersion" : "v0.4.8"
    },
    "1.0.2" : {
      "name" : "type",
      "description" : "Runtime validation and processing of JavaScript types",
      "version" : "1.0.2",
      "author" : {
        "name" : "Mariusz Nowak",
        "email" : "medyk@medikoo.com",
        "url" : "https://www.medikoo.com/"
      },
      "homepage" : "https://github.com/medikoo/type#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/medikoo/type.git"
      },
      "bugs" : {
        "url" : "https://github.com/medikoo/type/issues"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-1.0.2.tgz",
        "shasum" : "fbcf8c758cc147da3c254c7091fa4d56f8e59a6d"
      },
      "devDependencies" : {
        "chai" : "^4.2.0",
        "eslint" : "^6.1.0",
        "eslint-config-medikoo" : "^2.5.0",
        "git-list-updated" : "^1.2.1",
        "husky" : "^3.0.2",
        "lint-staged" : "^9.2.1",
        "mocha" : "^6.2.0",
        "nyc" : "^14.1.1",
        "prettier-elastic" : "^1.18.2"
      },
      "keywords" : [ "type", "coercion" ],
      "license" : "ISC",
      "maintainers" : [ {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "coverage" : "nyc --reporter=lcov --reporter=html --reporter=text-summary npm test",
        "check-coverage" : "npm run coverage && nyc check-coverage --statements 80 --function 80 --branches 80 --lines 80",
        "lint" : "eslint --ignore-path=.gitignore .",
        "lint-updated" : "pipe-git-updated --ext=js -- eslint --ignore-pattern '!*'",
        "prettier-check-updated" : "pipe-git-updated --ext=css --ext=html --ext=js --ext=json --ext=md --ext=yaml --ext=yml -- prettier -c",
        "prettify" : "prettier --write --ignore-path .gitignore '**/*.{css,html,js,json,md,yaml,yml}'",
        "test" : "mocha --recursive"
      },
      "_npmVersion" : "6.9.0",
      "_npmUser" : {
        "name" : "medikoo",
        "email" : "medikoo+npm@medikoo.com"
      },
      "_id" : "type@1.0.2",
      "lint-staged" : {
        "*.js" : [ "eslint" ],
        "*.{css,html,js,json,md,yaml,yml}" : [ "prettier -c" ]
      },
      "gitHead" : "e80aaadfa5be62d9c3e64acb17259997ee8d1e60",
      "husky" : {
        "hooks" : {
          "pre-commit" : "lint-staged"
        }
      },
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/type_1.0.2_1565088811529_0.7481603095712663"
      },
      "eslintConfig" : {
        "extends" : "medikoo/es3",
        "root" : true,
        "globals" : {
          "Map" : true,
          "Promise" : true,
          "Set" : true,
          "Symbol" : true
        },
        "overrides" : [ {
          "files" : "test/**/*.js",
          "env" : {
            "mocha" : true
          },
          "rules" : {
            "no-eval" : "off",
            "no-new-wrappers" : "off"
          }
        }, {
          "files" : [ "string/coerce.js", "number/coerce.js" ],
          "rules" : {
            "no-implicit-coercion" : "off"
          }
        }, {
          "files" : "plain-object/is.js",
          "rules" : {
            "no-proto" : "off"
          }
        } ]
      },
      "prettier" : {
        "printWidth" : 100,
        "tabWidth" : 4,
        "overrides" : [ {
          "files" : [ "*.md" ],
          "options" : {
            "tabWidth" : 2
          }
        } ]
      },
      "_nodeVersion" : "12.6.0"
    },
    "1.2.0" : {
      "name" : "type",
      "description" : "Runtime validation and processing of JavaScript types",
      "version" : "1.2.0",
      "author" : {
        "name" : "Mariusz Nowak",
        "email" : "medyk@medikoo.com",
        "url" : "https://www.medikoo.com/"
      },
      "homepage" : "https://github.com/medikoo/type#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/medikoo/type.git"
      },
      "bugs" : {
        "url" : "https://github.com/medikoo/type/issues"
      },
      "dist" : {
        "tarball" : "https://build-artifactory.eng.vmware.com/api/npm/npm/type/-/type-1.2.0.tgz",
        "shasum" : "848dd7698dafa3e54a6c479e759c4bc3f18847a0"
      },
      "devDependencies" : {
        "chai" : "^4.2.0",
        "eslint" : "^6.4.0",
        "eslint-config-medikoo" : "^2.5.1",
        "git-list-updated" : "^1.2.1",
        "husky" : "^3.0.5",
        "lint-staged" : "^9.2.5",
        "mocha" : "^6.2.0",
        "nyc" : "^14.1.1",
        "prettier-elastic" : "^1.18.2"
      },
      "keywords" : [ "type", "coercion" ],
      "license" : "ISC",
      "maintainers" : [ {
        "name" : "gozala",
        "email" : "rfobic@gmail.com"
      } ],
      "directories" : {
      },
      "scripts" : {
        "coverage" : "nyc --reporter=lcov --reporter=html --reporter=text-summary npm test",
        "check-coverage" : "npm run coverage && nyc check-coverage --statements 80 --function 80 --branches 80 --lines 80",
        "lint" : "eslint --ignore-path=.gitignore .",
        "lint-updated" : "pipe-git-updated --ext=js -- eslint --ignore-pattern '!*'",
        "prettier-check-updated" : "pipe-git-updated --ext=css --ext=html --ext=js --ext=json --ext=md --ext=yaml --ext=yml -- prettier -c",
        "prettify" : "prettier --write --ignore-path .gitignore '**/*.{css,html,js,json,md,yaml,yml}'",
        "test" : "mocha --recursive"
      },
      "_npmVersion" : "6.10.3",
      "_npmUser" : {
        "name" : "medikoo",
        "email" : "medikoo+npm@medikoo.com"
      },
      "_id" : "type@1.2.0",
      "lint-staged" : {
        "*.js" : [ "eslint" ],
        "*.{css,html,js,json,md,yaml,yml}" : [ "prettier -c" ]
      },
      "gitHead" : "fce328ae0235b259b5491a98e886eee75936ae6a",
      "husky" : {
        "hooks" : {
          "pre-commit" : "lint-staged"
        }
      },
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/type_1.2.0_1568979908335_0.7815180987509194"
      },
      "eslintConfig" : {
        "extends" : "medikoo/es3",
        "root" : true,
        "globals" : {
          "Map" : true,
          "Promise" : true,
          "Set" : true,
          "Symbol" : true
        },
        "overrides" : [ {
          "files" : "test/**/*.js",
          "env" : {
            "mocha" : true
          },
          "rules" : {
            "no-eval" : "off",
            "no-new-wrappers" : "off"
          }
        }, {
          "files" : [ "string/coerce.js", "number/coerce.js" ],
          "rules" : {
            "no-implicit-coercion" : "off"
          }
        }, {
          "files" : "plain-object/is.js",
          "rules" : {
            "no-proto" : "off"
          }
        } ]
      },
      "prettier" : {
        "printWidth" : 100,
        "tabWidth" : 4,
        "overrides" : [ {
          "files" : [ "*.md" ],
          "options" : {
            "tabWidth" : 2
          }
        } ]
      },
      "_nodeVersion" : "12.10.0"
    }
  },
  "readme" : "[![*nix build status][nix-build-image]][nix-build-url]\n[![Windows build status][win-build-image]][win-build-url]\n[![Tests coverage][cov-image]][cov-url]\n[![npm version][npm-image]][npm-url]\n\n# type\n\n## Runtime validation and processing of JavaScript types\n\n- Respects language nature and acknowledges its quirks\n- Allows coercion in restricted forms (rejects clearly invalid input, normalizes permissible type deviations)\n- No transpilation implied, written to work in all ECMAScript 3+ engines\n\n### Example usage\n\nBulletproof input arguments normalization and validation:\n\n```javascript\nconst ensureString        = require('type/string/ensure')\n    , ensureDate          = require('type/date/ensure')\n    , ensureNaturalNumber = require('type/natural-number/ensure')\n    , isObject            = require('type/object/is');\n\nmodule.exports = (path, options = { min: 0 }) {\n  path = ensureString(path, { errorMessage: \"%v is not a path\" });\n  if (!isObject(options)) options = {};\n  const min = ensureNaturalNumber(options.min, { default: 0 })\n      , max = ensureNaturalNumber(options.max, { isOptional: true })\n      , startTime = ensureDate(options.startTime, { isOptional: true });\n\n  // ...logic\n};\n```\n\n### Installation\n\n```bash\nnpm install type\n```\n\n## Utilities\n\nServes following kind of utilities:\n\n##### `*/coerce`\n\nRestricted coercion into primitive type. Returns coerced value or `null` if value is not coercible per rules.\n\n##### `*/is`\n\nObject type/kind confirmation, returns either `true` or `false`.\n\n##### `*/ensure`\n\nValue validation. Returns input value (in primitive cases possibly coerced) or if value doesn't meet the constraints throws `TypeError` .\n\nEach `*/ensure` utility, accepts following options (eventually passed with second argument):\n\n- `isOptional` - Makes `null` or `undefined` accepted as valid value. In such case instead of `TypeError` being thrown, `null` is returned.\n- `default` - A value to be returned if `null` or `undefined` is passed as an input value.\n- `errorMessage` - Custom error message (`%v` can be used as a placeholder for input value)\n\n---\n\n### Value\n\n_Value_, any value that's neither `null` nor `undefined` .\n\n#### `value/is`\n\nConfirms whether passed argument is a _value_\n\n```javascript\nconst isValue = require(\"type/value/is\");\n\nisValue({}); // true\nisValue(null); // false\n```\n\n#### `value/ensure`\n\nEnsures if given argument is a _value_. If it's a value it is returned back, if not `TypeError` is thrown\n\n```javascript\nconst ensureValue = require(\"type/value/ensure\");\n\nconst obj = {};\n\nensureValue(obj); // obj\nensureValue(null); // Thrown TypeError: Cannot use null\n```\n\n---\n\n### Object\n\n_Object_, any non-primitive value\n\n#### `object/is`\n\nConfirms if passed value is an object\n\n```javascript\nconst isObject = require(\"type/object/is\");\n\nisObject({}); // true\nisObject(true); // false\nisObject(null); // false\n```\n\n#### `object/ensure`\n\nIf given argument is an object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureObject = require(\"type/object/ensure\");\n\nconst obj = {};\n\nensureObject(obj); // obj\nensureString(null); // Thrown TypeError: null is not an object\n```\n\n---\n\n### String\n\n_string_ primitive\n\n#### `string/coerce`\n\nRestricted string coercion. Returns string presentation for every value that follows below constraints\n\n- is implicitly coercible to string\n- is neither`null` nor `undefined`\n- its `toString` method is not `Object.prototype.toString`\n\nFor all other values `null` is returned\n\n```javascript\nconst coerceToString = require(\"type/string/coerce\");\n\ncoerceToString(12); // \"12\"\ncoerceToString(undefined); // null\n```\n\n#### `string/ensure`\n\nIf given argument is a string coercible value (via [`string/coerce`](#stringcoerce)) returns result string.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureString = require(\"type/string/ensure\");\n\nensureString(12); // \"12\"\nensureString(null); // Thrown TypeError: null is not a string\n```\n\n---\n\n### Number\n\n_number_ primitive\n\n#### `number/coerce`\n\nRestricted number coercion. Returns number presentation for every value that follows below constraints\n\n- is implicitly coercible to number\n- is neither `null` nor `undefined`\n- is not `NaN` and doesn't coerce to `NaN`\n\nFor all other values `null` is returned\n\n```javascript\nconst coerceToNumber = require(\"type/number/coerce\");\n\ncoerceToNumber(\"12\"); // 12\ncoerceToNumber({}); // null\ncoerceToNumber(null); // null\n```\n\n#### `number/ensure`\n\nIf given argument is a number coercible value (via [`number/coerce`](#numbercoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureNumber = require(\"type/number/ensure\");\n\nensureNumber(12); // \"12\"\nensureNumber(null); // Thrown TypeError: null is not a number\n```\n\n---\n\n#### Finite Number\n\nFinite _number_ primitive\n\n##### `finite/coerce`\n\nFollows [`number/coerce`](#numbercoerce) additionally rejecting `Infinity` and `-Infinity` values (`null` is returned if given values coerces to them)\n\n```javascript\nconst coerceToFinite = require(\"type/finite/coerce\");\n\ncoerceToFinite(\"12\"); // 12\ncoerceToFinite(Infinity); // null\ncoerceToFinite(null); // null\n```\n\n##### `finite/ensure`\n\nIf given argument is a finite number coercible value (via [`finite/coerce`](#finitecoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureFinite = require(\"type/finite/ensure\");\n\nensureFinite(12); // \"12\"\nensureFinite(null); // Thrown TypeError: null is not a finite number\n```\n\n---\n\n#### Integer Number\n\nInteger _number_ primitive\n\n##### `integer/coerce`\n\nFollows [`finite/coerce`](#finitecoerce) additionally stripping decimal part from the number\n\n```javascript\nconst coerceToInteger = require(\"type/integer/coerce\");\n\ncoerceToInteger(\"12.95\"); // 12\ncoerceToInteger(Infinity); // null\ncoerceToInteger(null); // null\n```\n\n##### `integer/ensure`\n\nIf given argument is an integer coercible value (via [`integer/coerce`](#integercoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureInteger = require(\"type/integer/ensure\");\n\nensureInteger(12.93); // \"12\"\nensureInteger(null); // Thrown TypeError: null is not an integer\n```\n\n---\n\n#### Safe Integer Number\n\nSafe integer _number_ primitive\n\n##### `safe-integer/coerce`\n\nFollows [`integer/coerce`](#integercoerce) but returns `null` in place of values which are beyond `Number.MIN_SAFE_INTEGER` and `Number.MAX_SAFE_INTEGER` range.\n\n```javascript\nconst coerceToSafeInteger = require(\"type/safe-integer/coerce\");\n\ncoerceToInteger(\"12.95\"); // 12\ncoerceToInteger(9007199254740992); // null\ncoerceToInteger(null); // null\n```\n\n##### `safe-integer/ensure`\n\nIf given argument is a safe integer coercible value (via [`safe-integer/coerce`](#safe-integercoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureSafeInteger = require(\"type/safe-integer/ensure\");\n\nensureSafeInteger(12.93); // \"12\"\nensureSafeInteger(9007199254740992); // Thrown TypeError: null is not a safe integer\n```\n\n---\n\n#### Natural Number\n\nNatural _number_ primitive\n\n##### `natural-number/coerce`\n\nFollows [`integer/coerce`](#integercoerce) but returns `null` for values below `0`\n\n```javascript\nconst coerceToNaturalNumber = require(\"type/natural-number/coerce\");\n\ncoerceToNaturalNumber(\"12.95\"); // 12\ncoerceToNaturalNumber(-120); // null\ncoerceToNaturalNumber(null); // null\n```\n\n##### `natural-number/ensure`\n\nIf given argument is a natural number coercible value (via [`natural-number/coerce`](#natural-numbercoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureNaturalNumber = require(\"type/natural-number/ensure\");\n\nensureNaturalNumber(12.93); // \"12\"\nensureNaturalNumber(-230); // Thrown TypeError: null is not a natural number\n```\n\n---\n\n### Plain Object\n\nA _plain object_\n\n- Inherits directly from `Object.prototype` or `null`\n- Is not a constructor's `prototype` property\n\n#### `plain-object/is`\n\nConfirms if given object is a _plain object_\n\n```javascript\nconst isPlainObject = require(\"type/plain-object/is\");\n\nisPlainObject({}); // true\nisPlainObject(Object.create(null)); // true\nisPlainObject([]); // false\n```\n\n#### `plain-object/ensure`\n\nIf given argument is a plain object it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensurePlainObject = require(\"type/plain-object/ensure\");\n\nensurePlainObject({}); // {}\nensurePlainObject(\"foo\"); // Thrown TypeError: foo is not a plain object\n```\n\n##### Confirming on keys\n\nKeys can be validated by passing `allowedKeys` option. Note that in this case:\n\n- Error message lists up to three invalid keys\n\n```javascript\nconst allowedKeys = [\"foo\"];\n\nensurePlainObject({}, { allowedKeys }); // {}\nensurePlainObject({ foo: \"bar\" }, { allowedKeys }); // { foo: 'bar' }\n\n/*\n Below invocation with crash with:\n TypeError: [object Object] is not a valid plain object.\n            Following keys are unexpected: lorem, ipsum\n*/\nensurePlainObject({ foo: \"bar\", lorem: 1, ipsum: 2 }, { allowedKeys });\n```\n\n##### Confirming on property values\n\nProperty values can be validated by passing `ensurePropertyValue` option. Note that in this case:\n\n- A newly created instance of plain object with coerced values is returned\n- Error message lists up to three keys that contain invalid values\n\n```javascript\nconst ensureString = require(\"type/string/ensure\");\n\nensurePlainObject({ foo: 12 }, { ensurePropertyValue: ensureString }); // { foo: '12' }\n\n/*\n Below invocation with crash with:\n TypeError: [object Object] is not a valid plain object.\n            Valuees for following keys are invalid: lorem, ipsum\n*/\nensurePlainObject({ foo: 23, lorem: {}, ipsum: {} }, { ensurePropertyValue: ensureString });\n```\n\n---\n\n### Array\n\n_Array_ instance\n\n#### `array/is`\n\nConfirms if given object is a native array\n\n```javascript\nconst isArray = require(\"type/array/is\");\n\nisArray([]); // true\nisArray({}); // false\nisArray(\"foo\"); // false\n```\n\n#### `array/ensure`\n\nIf given argument is an array, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureArray = require(\"type/array/ensure\");\n\nensureArray([\"foo\"]); // [\"foo\"]\nensureArray(\"foo\"); // Thrown TypeError: foo is not an array\n```\n\n---\n\n#### Array Like\n\n_Array-like_ value (any value with `length` property)\n\n#### `array-like/is`\n\nRestricted _array-like_ confirmation. Returns true for every value that meets following contraints\n\n- is an _object_ (or with `allowString` option, a _string_)\n- is not a _function_\n- Exposes `length` that meets [`array-length`](#array-lengthcoerce) constraints\n\n```javascript\nconst isArrayLike = require(\"type/array-like/is\");\n\nisArrayLike([]); // true\nisArrayLike({}); // false\nisArrayLike({ length: 0 }); // true\nisArrayLike(\"foo\"); // false\nisArrayLike(\"foo\", { allowString: true }); // true\n```\n\n#### `array-like/ensure`\n\nIf given argument is an _array-like_, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureArrayLike = require(\"type/array-like/ensure\");\n\nensureArrayLike({ length: 0 }); // { length: 0 }\nensureArrayLike(\"foo\", { allowString: true }); // \"foo\"\nensureArrayLike({}); // Thrown TypeError: null is not an iterable\n```\n\n---\n\n#### Array length\n\n_number_ primitive that conforms as valid _array length_\n\n##### `array-length/coerce`\n\nFollows [`safe-integer/coerce`](#safe-integercoerce) but returns `null` in place of values which are below `0`\n\n```javascript\nconst coerceToArrayLength = require(\"type/safe-integer/coerce\");\n\ncoerceToArrayLength(\"12.95\"); // 12\ncoerceToArrayLength(9007199254740992); // null\ncoerceToArrayLength(null); // null\n```\n\n##### `array-length/ensure`\n\nIf given argument is an _array length_ coercible value (via [`array-length/coerce`](#array-lengthcoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureArrayLength = require(\"type/array-length/ensure\");\n\nensureArrayLength(12.93); // \"12\"\nensureArrayLength(9007199254740992); // Thrown TypeError: null is not a valid array length\n```\n\n---\n\n### Iterable\n\nValue which implements _iterable_ protocol\n\n#### `iterable/is`\n\nConfirms if given object is an _iterable_ and is not a _string_ (unless `allowString` option is passed)\n\n```javascript\nconst isIterable = require(\"type/iterable/is\");\n\nisIterable([]); // true\nisIterable({}); // false\nisIterable(\"foo\"); // false\nisIterable(\"foo\", { allowString: true }); // true\n```\n\nSupports also `denyEmpty` option\n\n```javascript\nisIterable([], { denyEmpty: true }); // false\nisIterable([\"foo\"], { denyEmpty: true }); // true\n```\n\n#### `iterable/ensure`\n\nIf given argument is an _iterable_, it is returned back. Otherwise `TypeError` is thrown.\nBy default _string_ primitives are rejected unless `allowString` option is passed.\n\n```javascript\nconst ensureIterable = require(\"type/iterable/ensure\");\n\nensureIterable([]); // []\nensureIterable(\"foo\", { allowString: true }); // \"foo\"\nensureIterable({}); // Thrown TypeError: null is not expected iterable\n```\n\n##### Denying empty iterables\n\nPass `denyEmpty` option to require non empty iterables\n\n```javascript\nensureIterable([], { denyEmpty: true }); // Thrown TypeError: [] is not expected iterable\n```\n\n##### Confirming on items\n\nItems can be validated by passing `ensureItem` option. Note that in this case:\n\n- A newly created instance of array with coerced values is returned\n- Error message lists up to three invalid items\n\n```javascript\nconst ensureString = require(\"type/string/ensure\");\n\nensureIterable(new Set([\"foo\", 12]), { ensureItem: ensureString }); // [\"foo\", \"12\"]\n\n/*\n Below invocation with crash with:\n TypeError: [object Set] is not expected iterable value.\n            Following items are invalid:\n              - [object Object]\n*/\nensureIterable(new Set([\"foo\", {}]), { ensureItem: ensureString });\n```\n\n---\n\n### Date\n\n_Date_ instance\n\n#### `date/is`\n\nConfirms if given object is a native date, and is not an _Invalid Date_\n\n```javascript\nconst isDate = require(\"type/date/is\");\n\nisDate(new Date()); // true\nisDate(new Date(\"Invalid date\")); // false\nisDate(Date.now()); // false\nisDate(\"foo\"); // false\n```\n\n#### `date/ensure`\n\nIf given argument is a date object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureDate = require(\"type/date/ensure\");\n\nconst date = new Date();\nensureDate(date); // date\nensureDate(123123); // Thrown TypeError: 123123 is not a date object\n```\n\n---\n\n### Time value\n\n_number_ primitive which is a valid _time value_ (as used internally in _Date_ instances)\n\n#### `time-value/coerce`\n\nFollows [`integer/coerce`](#integercoerce) but returns `null` in place of values which go beyond 100 000 0000 days from unix epoch\n\n```javascript\nconst coerceToTimeValue = require(\"type/time-value/coerce\");\n\ncoerceToTimeValue(12312312); // true\ncoerceToTimeValue(Number.MAX_SAFE_INTEGER); // false\ncoerceToTimeValue(\"foo\"); // false\n```\n\n##### `time-value/ensure`\n\nIf given argument is a _time value_ coercible value (via [`time-value/coerce`](#time-valuecoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureTimeValue = require(\"type/time-value/ensure\");\n\nensureTimeValue(12.93); // \"12\"\nensureTimeValue(Number.MAX_SAFE_INTEGER); // Thrown TypeError: null is not a natural number\n```\n\n---\n\n### Function\n\n_Function_ instance\n\n#### `function/is`\n\nConfirms if given object is a native function\n\n```javascript\nconst isFunction = require(\"type/function/is\");\n\nisFunction(function () {}); // true\nisFunction(() => {}); // true\nisFunction(class {}); // true\nisFunction(\"foo\"); // false\n```\n\n#### `function/ensure`\n\nIf given argument is a function object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureFunction = require(\"type/function/ensure\");\n\nconst fn = function () {};\nensureFunction(fn); // fn\nensureFunction(/foo/); // Thrown TypeError: /foo/ is not a function\n```\n\n---\n\n#### Plain Function\n\nA _Function_ instance that is not a _Class_\n\n##### `plain-function/is`\n\nConfirms if given object is a _plain function_\n\n```javascript\nconst isPlainFunction = require(\"type/plain-function/is\");\n\nisPlainFunction(function () {}); // true\nisPlainFunction(() => {}); // true\nisPlainFunction(class {}); // false\nisPlainFunction(\"foo\"); // false\n```\n\n##### `plain-function/ensure`\n\nIf given argument is a _plain function_ object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensurePlainFunction = require(\"type/function/ensure\");\n\nconst fn = function () {};\nensurePlainFunction(fn); // fn\nensurePlainFunction(class {}); // Thrown TypeError: class is not a plain function\n```\n\n---\n\n### RegExp\n\n_RegExp_ instance\n\n#### `reg-exp/is`\n\nConfirms if given object is a native regular expression object\n\n```javascript\nconst isRegExp = require(\"type/reg-exp/is\");\n\nisRegExp(/foo/);\nisRegExp({}); // false\nisRegExp(\"foo\"); // false\n```\n\n#### `reg-exp/ensure`\n\nIf given argument is a regular expression object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureRegExp = require(\"type/reg-exp/ensure\");\n\nensureRegExp(/foo/); // /foo/\nensureRegExp(\"foo\"); // Thrown TypeError: null is not a regular expression object\n```\n\n---\n\n### Promise\n\n_Promise_ instance\n\n#### `promise/is`\n\nConfirms if given object is a native _promise_\n\n```javascript\nconst isPromise = require(\"type/promise/is\");\n\nisPromise(Promise.resolve()); // true\nisPromise({ then: () => {} }); // false\nisPromise({}); // false\n```\n\n##### `promise/ensure`\n\nIf given argument is a promise, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensurePromise = require(\"type/promise/ensure\");\n\nconst promise = Promise.resolve();\nensurePromise(promise); // promise\neensurePromise({}); // Thrown TypeError: [object Object] is not a promise\n```\n\n---\n\n#### Thenable\n\n_Thenable_ object (an object with `then` method)\n\n##### `thenable/is`\n\nConfirms if given object is a _thenable_\n\n```javascript\nconst isThenable = require(\"type/thenable/is\");\n\nisThenable(Promise.resolve()); // true\nisThenable({ then: () => {} }); // true\nisThenable({}); // false\n```\n\n##### `thenable/ensure`\n\nIf given argument is a _thenable_ object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureThenable = require(\"type/thenable/ensure\");\n\nconst promise = Promise.resolve();\nensureThenable(promise); // promise\nensureThenable({}); // Thrown TypeError: [object Object] is not a thenable object\n```\n\n---\n\n### Error\n\n_Error_ instance\n\n#### `error/is`\n\nConfirms if given object is a native error object\n\n```javascript\nconst isError = require(\"type/error/is\");\n\nisError(new Error()); // true\nisError({ message: \"Fake error\" }); // false\n```\n\n#### `error/ensure`\n\nIf given argument is an error object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureError = require(\"type/error/ensure\");\n\nconst someError = new Error(\"Some error\");\nensureError(someError); // someError\nensureError({ message: \"Fake error\" }); // Thrown TypeError: [object Object] is not an error object\n```\n\n---\n\n### Prototype\n\nSome constructor's `prototype` property\n\n#### `prototype/is`\n\nConfirms if given object serves as a _prototype_ property\n\n```javascript\nconst isPrototype = require(\"type/prototype/is\");\n\nisPrototype({}); // false\nisPrototype(Object.prototype); // true\nisPrototype(Array.prototype); // true\n```\n\n### Tests\n\n    $ npm test\n\n[nix-build-image]: https://semaphoreci.com/api/v1/medikoo-org/type/branches/master/shields_badge.svg\n[nix-build-url]: https://semaphoreci.com/medikoo-org/type\n[win-build-image]: https://ci.appveyor.com/api/projects/status/8nrtluuwsb5k9l8d?svg=true\n[win-build-url]: https://ci.appveyor.com/api/project/medikoo/type\n[cov-image]: https://img.shields.io/codecov/c/github/medikoo/type.svg\n[cov-url]: https://codecov.io/gh/medikoo/type\n[npm-image]: https://img.shields.io/npm/v/type.svg\n[npm-url]: https://www.npmjs.com/package/type\n",
  "maintainers" : [ {
    "name" : "gozala",
    "email" : "rfobic@gmail.com"
  } ],
  "author" : {
    "name" : "Mariusz Nowak",
    "email" : "medyk@medikoo.com",
    "url" : "https://www.medikoo.com/"
  },
  "time" : {
    "1.0.3" : "2019-08-06T11:29:08.511Z",
    "2.0.0" : "2019-10-10T15:52:38.515Z",
    "created" : "2011-06-09T23:12:24.505Z",
    "modified" : "2019-10-10T15:52:41.134Z",
    "0.0.2" : "2012-02-25T18:41:58.376Z",
    "0.0.3" : "2012-06-18T19:41:26.049Z",
    "1.0.0" : "2019-04-05T09:08:56.236Z",
    "1.0.1" : "2019-04-08T14:22:06.794Z",
    "1.1.0" : "2019-09-20T11:04:36.881Z",
    "0.0.1" : "2011-06-09T23:12:25.475Z",
    "1.0.2" : "2019-08-06T10:53:31.760Z",
    "1.2.0" : "2019-09-20T11:45:08.471Z"
  },
  "repository" : {
    "type" : "git",
    "url" : "git+https://github.com/medikoo/type.git"
  },
  "users" : {
  },
  "readmeFilename" : "README.md",
  "homepage" : "https://github.com/medikoo/type#readme",
  "keywords" : [ "type", "coercion" ],
  "bugs" : {
    "url" : "https://github.com/medikoo/type/issues"
  },
  "license" : "ISC"
}